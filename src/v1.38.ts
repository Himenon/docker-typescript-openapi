// 
// Generated by @himenon/openapi-typescript-code-generator v0.16.0
// 
// OpenApi : 3.0.0
// 
// 


export namespace Schemas {
    /** An open port on a container */
    export interface Port {
        /** Host IP address that the container's port is mapped to */
        IP?: string;
        /** Port on the container */
        PrivatePort: number;
        /** Port exposed on the host */
        PublicPort?: number;
        Type: "tcp" | "udp" | "sctp";
    }
    /** A mount point inside a container */
    export interface MountPoint {
        Type?: string;
        Name?: string;
        Source?: string;
        Destination?: string;
        Driver?: string;
        Mode?: string;
        RW?: boolean;
        Propagation?: string;
    }
    /** A device mapping between the host and container */
    export interface DeviceMapping {
        PathOnHost?: string;
        PathInContainer?: string;
        CgroupPermissions?: string;
    }
    export interface ThrottleDevice {
        /** Device path */
        Path?: string;
        /** Rate */
        Rate?: number;
    }
    export interface Mount {
        /** Container path. */
        Target?: string;
        /** Mount source (e.g. a volume name, a host path). */
        Source?: string;
        /**
         * The mount type. Available types:
         *
         * - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
         * - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
         * - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
         */
        Type?: "bind" | "volume" | "tmpfs";
        /** Whether the mount should be read-only. */
        ReadOnly?: boolean;
        /** The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`. */
        Consistency?: string;
        /** Optional configuration for the `bind` type. */
        BindOptions?: {
            /** A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`. */
            Propagation?: "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave";
        };
        /** Optional configuration for the `volume` type. */
        VolumeOptions?: {
            /** Populate volume with data from the target. */
            NoCopy?: boolean;
            /** User-defined key/value metadata. */
            Labels?: {
                [key: string]: string;
            };
            /** Map of driver specific options */
            DriverConfig?: {
                /** Name of the driver to use to create the volume. */
                Name?: string;
                /** key/value map of driver specific options. */
                Options?: {
                    [key: string]: string;
                };
            };
        };
        /** Optional configuration for the `tmpfs` type. */
        TmpfsOptions?: {
            /** The size for the tmpfs mount in bytes. */
            SizeBytes?: number;
            /** The permission mode for the tmpfs mount in an integer. */
            Mode?: number;
        };
    }
    /**
     * The behavior to apply when the container exits. The default is not to restart.
     *
     * An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server.
     */
    export interface RestartPolicy {
        /**
         * - Empty string means not to restart
         * - `always` Always restart
         * - `unless-stopped` Restart always except when the user has manually stopped the container
         * - `on-failure` Restart only when the container exit code is non-zero
         */
        Name?: "" | "always" | "unless-stopped" | "on-failure";
        /** If `on-failure` is used, the number of times to retry before giving up */
        MaximumRetryCount?: number;
    }
    /** A container's resources (cgroups config, ulimits, etc) */
    export interface Resources {
        /** An integer value representing this container's relative CPU weight versus other containers. */
        CpuShares?: number;
        /** Memory limit in bytes. */
        Memory?: number;
        /** Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist. */
        CgroupParent?: string;
        /** Block IO weight (relative weight). */
        BlkioWeight?: number;
        /** Block IO weight (relative device weight) in the form `[{"Path": "device_path", "Weight": weight}]`. */
        BlkioWeightDevice?: {
            Path?: string;
            Weight?: number;
        }[];
        /** Limit read rate (bytes per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`. */
        BlkioDeviceReadBps?: Schemas.ThrottleDevice[];
        /** Limit write rate (bytes per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`. */
        BlkioDeviceWriteBps?: Schemas.ThrottleDevice[];
        /** Limit read rate (IO per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`. */
        BlkioDeviceReadIOps?: Schemas.ThrottleDevice[];
        /** Limit write rate (IO per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`. */
        BlkioDeviceWriteIOps?: Schemas.ThrottleDevice[];
        /** The length of a CPU period in microseconds. */
        CpuPeriod?: number;
        /** Microseconds of CPU time that the container can get in a CPU period. */
        CpuQuota?: number;
        /** The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks. */
        CpuRealtimePeriod?: number;
        /** The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks. */
        CpuRealtimeRuntime?: number;
        /** CPUs in which to allow execution (e.g., `0-3`, `0,1`) */
        CpusetCpus?: string;
        /** Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. */
        CpusetMems?: string;
        /** A list of devices to add to the container. */
        Devices?: Schemas.DeviceMapping[];
        /** a list of cgroup rules to apply to the container */
        DeviceCgroupRules?: string[];
        /** Disk limit (in bytes). */
        DiskQuota?: number;
        /** Kernel memory limit in bytes. */
        KernelMemory?: number;
        /** Memory soft limit in bytes. */
        MemoryReservation?: number;
        /** Total memory limit (memory + swap). Set as `-1` to enable unlimited swap. */
        MemorySwap?: number;
        /** Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100. */
        MemorySwappiness?: number;
        /** CPU quota in units of 10<sup>-9</sup> CPUs. */
        NanoCpus?: number;
        /** Disable OOM Killer for the container. */
        OomKillDisable?: boolean;
        /** Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. */
        Init?: boolean | null;
        /** Tune a container's pids limit. Set -1 for unlimited. */
        PidsLimit?: number;
        /** A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`" */
        Ulimits?: {
            /** Name of ulimit */
            Name?: string;
            /** Soft limit */
            Soft?: number;
            /** Hard limit */
            Hard?: number;
        }[];
        /**
         * The number of usable CPUs (Windows only).
         *
         * On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
         */
        CpuCount?: number;
        /**
         * The usable percentage of the available CPUs (Windows only).
         *
         * On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
         */
        CpuPercent?: number;
        /** Maximum IOps for the container system drive (Windows only) */
        IOMaximumIOps?: number;
        /** Maximum IO in bytes per second for the container system drive (Windows only) */
        IOMaximumBandwidth?: number;
    }
    /** An object describing the resources which can be advertised by a node and requested by a task */
    export interface ResourceObject {
        NanoCPUs?: number;
        MemoryBytes?: number;
        GenericResources?: Schemas.GenericResources;
    }
    /** User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`) */
    export type GenericResources = {
        NamedResourceSpec?: {
            Kind?: string;
            Value?: string;
        };
        DiscreteResourceSpec?: {
            Kind?: string;
            Value?: number;
        };
    }[];
    /** A test to perform to check that the container is healthy. */
    export interface HealthConfig {
        /**
         * The test to perform. Possible values are:
         *
         * - `[]` inherit healthcheck from image or parent image
         * - `["NONE"]` disable healthcheck
         * - `["CMD", args...]` exec arguments directly
         * - `["CMD-SHELL", command]` run command with system's default shell
         */
        Test?: string[];
        /** The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit. */
        Interval?: number;
        /** The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit. */
        Timeout?: number;
        /** The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit. */
        Retries?: number;
        /** Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit. */
        StartPeriod?: number;
    }
    export type HostConfig = Schemas.Resources & {
        /**
         * A list of volume bindings for this container. Each volume binding is a string in one of these forms:
         *
         * - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path.
         * - `host-src:container-dest:ro` to make the bind mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path.
         * - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path.
         * - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path.
         */
        Binds?: string[];
        /** Path to a file where the container ID is written */
        ContainerIDFile?: string;
        /** The logging configuration for this container */
        LogConfig?: {
            Type?: "json-file" | "syslog" | "journald" | "gelf" | "fluentd" | "awslogs" | "splunk" | "etwlogs" | "none";
            Config?: {
                [key: string]: string;
            };
        };
        /** Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to. */
        NetworkMode?: string;
        PortBindings?: Schemas.PortMap;
        RestartPolicy?: Schemas.RestartPolicy;
        /** Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set. */
        AutoRemove?: boolean;
        /** Driver that this container uses to mount volumes. */
        VolumeDriver?: string;
        /** A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`. */
        VolumesFrom?: string[];
        /** Specification for mounts to be added to the container. */
        Mounts?: Schemas.Mount[];
        /** A list of kernel capabilities to add to the container. */
        CapAdd?: string[];
        /** A list of kernel capabilities to drop from the container. */
        CapDrop?: string[];
        /** A list of DNS servers for the container to use. */
        Dns?: string[];
        /** A list of DNS options. */
        DnsOptions?: string[];
        /** A list of DNS search domains. */
        DnsSearch?: string[];
        /** A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `["hostname:IP"]`. */
        ExtraHosts?: string[];
        /** A list of additional groups that the container process will run as. */
        GroupAdd?: string[];
        /**
         * IPC sharing mode for the container. Possible values are:
         *
         * - `"none"`: own private IPC namespace, with /dev/shm not mounted
         * - `"private"`: own private IPC namespace
         * - `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
         * - `"container:<name|id>"`: join another (shareable) container's IPC namespace
         * - `"host"`: use the host system's IPC namespace
         *
         * If not specified, daemon default is used, which can either be `"private"`
         * or `"shareable"`, depending on daemon version and configuration.
         */
        IpcMode?: string;
        /** Cgroup to use for the container. */
        Cgroup?: string;
        /** A list of links for the container in the form `container_name:alias`. */
        Links?: string[];
        /** An integer value containing the score given to the container in order to tune OOM killer preferences. */
        OomScoreAdj?: number;
        /**
         * Set the PID (Process) Namespace mode for the container. It can be either:
         *
         * - `"container:<name|id>"`: joins another container's PID namespace
         * - `"host"`: use the host's PID namespace inside the container
         */
        PidMode?: string;
        /** Gives the container full access to the host. */
        Privileged?: boolean;
        /**
         * Allocates an ephemeral host port for all of a container's
         * exposed ports.
         *
         * Ports are de-allocated when the container stops and allocated when the container starts.
         * The allocated port might be changed when restarting the container.
         *
         * The port is selected from the ephemeral port range that depends on the kernel.
         * For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.
         */
        PublishAllPorts?: boolean;
        /** Mount the container's root filesystem as read only. */
        ReadonlyRootfs?: boolean;
        /** A list of string values to customize labels for MLS systems, such as SELinux. */
        SecurityOpt?: string[];
        /** Storage driver options for this container, in the form `{"size": "120G"}`. */
        StorageOpt?: {
            [key: string]: string;
        };
        /** A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ "/run": "rw,noexec,nosuid,size=65536k" }`. */
        Tmpfs?: {
            [key: string]: string;
        };
        /** UTS namespace to use for the container. */
        UTSMode?: string;
        /** Sets the usernamespace mode for the container when usernamespace remapping option is enabled. */
        UsernsMode?: string;
        /** Size of `/dev/shm` in bytes. If omitted, the system uses 64MB. */
        ShmSize?: number;
        /** A list of kernel parameters (sysctls) to set in the container. For example: `{"net.ipv4.ip_forward": "1"}` */
        Sysctls?: {
            [key: string]: string;
        };
        /** Runtime to use with this container. */
        Runtime?: string;
        /** Initial console size, as an `[height, width]` array. (Windows only) */
        ConsoleSize?: number[];
        /** Isolation technology of the container. (Windows only) */
        Isolation?: "default" | "process" | "hyperv";
        /** The list of paths to be masked inside the container (this overrides the default set of paths) */
        MaskedPaths?: string[];
        /** The list of paths to be set as read-only inside the container (this overrides the default set of paths) */
        ReadonlyPaths?: string[];
    };
    /** Configuration for a container that is portable between hosts */
    export interface ContainerConfig {
        /** The hostname to use for the container, as a valid RFC 1123 hostname. */
        Hostname?: string;
        /** The domain name to use for the container. */
        Domainname?: string;
        /** The user that commands are run as inside the container. */
        User?: string;
        /** Whether to attach to `stdin`. */
        AttachStdin?: boolean;
        /** Whether to attach to `stdout`. */
        AttachStdout?: boolean;
        /** Whether to attach to `stderr`. */
        AttachStderr?: boolean;
        /**
         * An object mapping ports to an empty object in the form:
         *
         * `{"<port>/<tcp|udp|sctp>": {}}`
         */
        ExposedPorts?: {
            [key: string]: {};
        };
        /** Attach standard streams to a TTY, including `stdin` if it is not closed. */
        Tty?: boolean;
        /** Open `stdin` */
        OpenStdin?: boolean;
        /** Close `stdin` after one attached client disconnects */
        StdinOnce?: boolean;
        /** A list of environment variables to set inside the container in the form `["VAR=value", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value. */
        Env?: string[];
        /** Command to run specified as a string or an array of strings. */
        Cmd?: string[];
        Healthcheck?: Schemas.HealthConfig;
        /** Command is already escaped (Windows only) */
        ArgsEscaped?: boolean;
        /** The name of the image to use when creating the container */
        Image?: string;
        /** An object mapping mount point paths inside the container to empty objects. */
        Volumes?: {
            [key: string]: {};
        };
        /** The working directory for commands to run in. */
        WorkingDir?: string;
        /**
         * The entry point for the container as a string or an array of strings.
         *
         * If the array consists of exactly one empty string (`[""]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
         */
        Entrypoint?: string[];
        /** Disable networking for the container. */
        NetworkDisabled?: boolean;
        /** MAC address of the container. */
        MacAddress?: string;
        /** `ONBUILD` metadata that were defined in the image's `Dockerfile`. */
        OnBuild?: string[];
        /** User-defined key/value metadata. */
        Labels?: {
            [key: string]: string;
        };
        /** Signal to stop a container as a string or unsigned integer. */
        StopSignal?: string;
        /** Timeout to stop a container in seconds. */
        StopTimeout?: number;
        /** Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. */
        Shell?: string[];
    }
    /** NetworkSettings exposes the network settings in the API */
    export interface NetworkSettings {
        /** Name of the network'a bridge (for example, `docker0`). */
        Bridge?: string;
        /** SandboxID uniquely represents a container's network stack. */
        SandboxID?: string;
        /** Indicates if hairpin NAT should be enabled on the virtual interface. */
        HairpinMode?: boolean;
        /** IPv6 unicast address using the link-local prefix. */
        LinkLocalIPv6Address?: string;
        /** Prefix length of the IPv6 unicast address. */
        LinkLocalIPv6PrefixLen?: number;
        Ports?: Schemas.PortMap;
        /** SandboxKey identifies the sandbox */
        SandboxKey?: string;
        SecondaryIPAddresses?: Schemas.Address[] | null;
        SecondaryIPv6Addresses?: Schemas.Address[] | null;
        /**
         * EndpointID uniquely represents a service endpoint in a Sandbox.
         *
         * <p><br /></p>
         *
         * > **Deprecated**: This field is only propagated when attached to the
         * > default "bridge" network. Use the information from the "bridge"
         * > network inside the `Networks` map instead, which contains the same
         * > information. This field was deprecated in Docker 1.9 and is scheduled
         * > to be removed in Docker 17.12.0
         */
        EndpointID?: string;
        /**
         * Gateway address for the default "bridge" network.
         *
         * <p><br /></p>
         *
         * > **Deprecated**: This field is only propagated when attached to the
         * > default "bridge" network. Use the information from the "bridge"
         * > network inside the `Networks` map instead, which contains the same
         * > information. This field was deprecated in Docker 1.9 and is scheduled
         * > to be removed in Docker 17.12.0
         */
        Gateway?: string;
        /**
         * Global IPv6 address for the default "bridge" network.
         *
         * <p><br /></p>
         *
         * > **Deprecated**: This field is only propagated when attached to the
         * > default "bridge" network. Use the information from the "bridge"
         * > network inside the `Networks` map instead, which contains the same
         * > information. This field was deprecated in Docker 1.9 and is scheduled
         * > to be removed in Docker 17.12.0
         */
        GlobalIPv6Address?: string;
        /**
         * Mask length of the global IPv6 address.
         *
         * <p><br /></p>
         *
         * > **Deprecated**: This field is only propagated when attached to the
         * > default "bridge" network. Use the information from the "bridge"
         * > network inside the `Networks` map instead, which contains the same
         * > information. This field was deprecated in Docker 1.9 and is scheduled
         * > to be removed in Docker 17.12.0
         */
        GlobalIPv6PrefixLen?: number;
        /**
         * IPv4 address for the default "bridge" network.
         *
         * <p><br /></p>
         *
         * > **Deprecated**: This field is only propagated when attached to the
         * > default "bridge" network. Use the information from the "bridge"
         * > network inside the `Networks` map instead, which contains the same
         * > information. This field was deprecated in Docker 1.9 and is scheduled
         * > to be removed in Docker 17.12.0
         */
        IPAddress?: string;
        /**
         * Mask length of the IPv4 address.
         *
         * <p><br /></p>
         *
         * > **Deprecated**: This field is only propagated when attached to the
         * > default "bridge" network. Use the information from the "bridge"
         * > network inside the `Networks` map instead, which contains the same
         * > information. This field was deprecated in Docker 1.9 and is scheduled
         * > to be removed in Docker 17.12.0
         */
        IPPrefixLen?: number;
        /**
         * IPv6 gateway address for this network.
         *
         * <p><br /></p>
         *
         * > **Deprecated**: This field is only propagated when attached to the
         * > default "bridge" network. Use the information from the "bridge"
         * > network inside the `Networks` map instead, which contains the same
         * > information. This field was deprecated in Docker 1.9 and is scheduled
         * > to be removed in Docker 17.12.0
         */
        IPv6Gateway?: string;
        /**
         * MAC address for the container on the default "bridge" network.
         *
         * <p><br /></p>
         *
         * > **Deprecated**: This field is only propagated when attached to the
         * > default "bridge" network. Use the information from the "bridge"
         * > network inside the `Networks` map instead, which contains the same
         * > information. This field was deprecated in Docker 1.9 and is scheduled
         * > to be removed in Docker 17.12.0
         */
        MacAddress?: string;
        /** Information about all networks that the container is connected to. */
        Networks?: {
            [key: string]: Schemas.EndpointSettings;
        };
    }
    /** Address represents an IPv4 or IPv6 IP address. */
    export interface Address {
        /** IP address. */
        Addr?: string;
        /** Mask length of the IP address. */
        PrefixLen?: number;
    }
    /**
     * PortMap describes the mapping of container ports to host ports, using the
     * container's port-number and protocol as key in the format `<port>/<protocol>`,
     * for example, `80/udp`.
     *
     * If a container's port is mapped for multiple protocols, separate entries
     * are added to the mapping table.
     */
    export interface PortMap {
        [key: string]: Schemas.PortBinding[];
    }
    /**
     * PortBinding represents a binding between a host IP address and a host
     * port.
     */
    export interface PortBinding {
        /** Host IP address that the container's port is mapped to. */
        HostIp?: string;
        /** Host port number that the container's port is mapped to. */
        HostPort?: string;
    }
    /** Information about a container's graph driver. */
    export interface GraphDriverData {
        Name: string;
        Data: {
            [key: string]: string;
        };
    }
    export interface Image {
        Id: string;
        RepoTags?: string[];
        RepoDigests?: string[];
        Parent: string;
        Comment: string;
        Created: string;
        Container: string;
        ContainerConfig?: Schemas.ContainerConfig;
        DockerVersion: string;
        Author: string;
        Config?: Schemas.ContainerConfig;
        Architecture: string;
        Os: string;
        OsVersion?: string;
        Size: number;
        VirtualSize: number;
        GraphDriver: Schemas.GraphDriverData;
        RootFS: {
            Type: string;
            Layers?: string[];
            BaseLayer?: string;
        };
        Metadata?: {
            LastTagTime?: string;
        };
    }
    export interface ImageSummary {
        Id: string;
        ParentId: string;
        RepoTags: string[];
        RepoDigests: string[];
        Created: number;
        Size: number;
        SharedSize: number;
        VirtualSize: number;
        Labels: {
            [key: string]: string;
        };
        Containers: number;
    }
    export interface AuthConfig {
        username?: string;
        password?: string;
        email?: string;
        serveraddress?: string;
    }
    export interface ProcessConfig {
        privileged?: boolean;
        user?: string;
        tty?: boolean;
        entrypoint?: string;
        arguments?: string[];
    }
    export interface Volume {
        /** Name of the volume. */
        Name: string;
        /** Name of the volume driver used by the volume. */
        Driver: string;
        /** Mount path of the volume on the host. */
        Mountpoint: string;
        /** Date/Time the volume was created. */
        CreatedAt?: string;
        /**
         * Low-level details about the volume, provided by the volume driver.
         * Details are returned as a map with key/value pairs:
         * `{"key":"value","key2":"value2"}`.
         *
         * The `Status` field is optional, and is omitted if the volume driver
         * does not support this feature.
         */
        Status?: {
            [key: string]: {};
        };
        /** User-defined key/value metadata. */
        Labels: {
            [key: string]: string;
        };
        /** The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. */
        Scope: "local" | "global";
        /** The driver specific options used when creating the volume. */
        Options: {
            [key: string]: string;
        };
        /**
         * Usage details about the volume. This information is used by the
         * `GET /system/df` endpoint, and omitted in other endpoints.
         */
        UsageData?: {
            /**
             * Amount of disk space used by the volume (in bytes). This information
             * is only available for volumes created with the `"local"` volume
             * driver. For volumes created with other volume drivers, this field
             * is set to `-1` ("not available")
             */
            Size: number;
            /**
             * The number of containers referencing this volume. This field
             * is set to `-1` if the reference-count is not available.
             */
            RefCount: number;
        } | null;
    }
    export interface Network {
        Name?: string;
        Id?: string;
        Created?: string;
        Scope?: string;
        Driver?: string;
        EnableIPv6?: boolean;
        IPAM?: Schemas.IPAM;
        Internal?: boolean;
        Attachable?: boolean;
        Ingress?: boolean;
        Containers?: {
            [key: string]: Schemas.NetworkContainer;
        };
        Options?: {
            [key: string]: string;
        };
        Labels?: {
            [key: string]: string;
        };
    }
    export interface IPAM {
        /** Name of the IPAM driver to use. */
        Driver?: string;
        /** List of IPAM configuration options, specified as a map: `{"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP address>}` */
        Config?: {
            [key: string]: string;
        }[];
        /** Driver-specific options, specified as a map. */
        Options?: {
            [key: string]: string;
        }[];
    }
    export interface NetworkContainer {
        Name?: string;
        EndpointID?: string;
        MacAddress?: string;
        IPv4Address?: string;
        IPv6Address?: string;
    }
    export interface BuildInfo {
        id?: string;
        stream?: string;
        error?: string;
        errorDetail?: Schemas.ErrorDetail;
        status?: string;
        progress?: string;
        progressDetail?: Schemas.ProgressDetail;
        aux?: Schemas.ImageID;
    }
    /** Image ID or Digest */
    export interface ImageID {
        ID?: string;
    }
    export interface CreateImageInfo {
        id?: string;
        error?: string;
        status?: string;
        progress?: string;
        progressDetail?: Schemas.ProgressDetail;
    }
    export interface PushImageInfo {
        error?: string;
        status?: string;
        progress?: string;
        progressDetail?: Schemas.ProgressDetail;
    }
    export interface ErrorDetail {
        code?: number;
        message?: string;
    }
    export interface ProgressDetail {
        current?: number;
        total?: number;
    }
    /** Represents an error. */
    export interface ErrorResponse {
        /** The error message. */
        message: string;
    }
    /** Response to an API call that returns just an Id */
    export interface IdResponse {
        /** The id of the newly created object. */
        Id: string;
    }
    /** Configuration for a network endpoint. */
    export interface EndpointSettings {
        IPAMConfig?: Schemas.EndpointIPAMConfig;
        Links?: string[];
        Aliases?: string[];
        /** Unique ID of the network. */
        NetworkID?: string;
        /** Unique ID for the service endpoint in a Sandbox. */
        EndpointID?: string;
        /** Gateway address for this network. */
        Gateway?: string;
        /** IPv4 address. */
        IPAddress?: string;
        /** Mask length of the IPv4 address. */
        IPPrefixLen?: number;
        /** IPv6 gateway address. */
        IPv6Gateway?: string;
        /** Global IPv6 address. */
        GlobalIPv6Address?: string;
        /** Mask length of the global IPv6 address. */
        GlobalIPv6PrefixLen?: number;
        /** MAC address for the endpoint on this network. */
        MacAddress?: string;
        /**
         * DriverOpts is a mapping of driver options and values. These options
         * are passed directly to the driver and are driver specific.
         */
        DriverOpts?: {
            [key: string]: string;
        };
    }
    /** EndpointIPAMConfig represents an endpoint's IPAM configuration. */
    export interface EndpointIPAMConfig {
        IPv4Address?: string;
        IPv6Address?: string;
        LinkLocalIPs?: string[];
    }
    export interface PluginMount {
        Name: string;
        Description: string;
        Settable: string[];
        Source: string;
        Destination: string;
        Type: string;
        Options: string[];
    }
    export interface PluginDevice {
        Name: string;
        Description: string;
        Settable: string[];
        Path: string;
    }
    export interface PluginEnv {
        Name: string;
        Description: string;
        Settable: string[];
        Value: string;
    }
    export interface PluginInterfaceType {
        Prefix: string;
        Capability: string;
        Version: string;
    }
    /** A plugin for the Engine API */
    export interface Plugin {
        Id?: string;
        Name: string;
        /** True if the plugin is running. False if the plugin is not running, only installed. */
        Enabled: boolean;
        /** Settings that can be modified by users. */
        Settings: {
            Mounts: Schemas.PluginMount[];
            Env: string[];
            Args: string[];
            Devices: Schemas.PluginDevice[];
        };
        /** plugin remote reference used to push/pull the plugin */
        PluginReference?: string;
        /** The config of a plugin. */
        Config: {
            /** Docker Version used to create the plugin */
            DockerVersion?: string;
            Description: string;
            Documentation: string;
            /** The interface between Docker and the plugin */
            Interface: {
                Types: Schemas.PluginInterfaceType[];
                Socket: string;
                /** Protocol to use for clients connecting to the plugin. */
                ProtocolScheme?: "" | "moby.plugins.http/v1";
            };
            Entrypoint: string[];
            WorkDir: string;
            User?: {
                UID?: number;
                GID?: number;
            };
            Network: {
                Type: string;
            };
            Linux: {
                Capabilities: string[];
                AllowAllDevices: boolean;
                Devices: Schemas.PluginDevice[];
            };
            PropagatedMount: string;
            IpcHost: boolean;
            PidHost: boolean;
            Mounts: Schemas.PluginMount[];
            Env: Schemas.PluginEnv[];
            Args: {
                Name: string;
                Description: string;
                Settable: string[];
                Value: string[];
            };
            rootfs?: {
                type?: string;
                diff_ids?: string[];
            };
        };
    }
    /**
     * The version number of the object such as node, service, etc. This is needed to avoid conflicting writes.
     * The client must send the version number along with the modified specification when updating these objects.
     * This approach ensures safe concurrency and determinism in that the change on the object
     * may not be applied if the version number has changed from the last read. In other words,
     * if two update requests specify the same base version, only one of the requests can succeed.
     * As a result, two separate update requests that happen at the same time will not
     * unintentionally overwrite each other.
     */
    export interface ObjectVersion {
        Index?: number;
    }
    export interface NodeSpec {
        /** Name for the node. */
        Name?: string;
        /** User-defined key/value metadata. */
        Labels?: {
            [key: string]: string;
        };
        /** Role of the node. */
        Role?: "worker" | "manager";
        /** Availability of the node. */
        Availability?: "active" | "pause" | "drain";
    }
    export interface Node {
        ID?: string;
        Version?: Schemas.ObjectVersion;
        /**
         * Date and time at which the node was added to the swarm in
         * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
         */
        CreatedAt?: string;
        /**
         * Date and time at which the node was last updated in
         * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
         */
        UpdatedAt?: string;
        Spec?: Schemas.NodeSpec;
        Description?: Schemas.NodeDescription;
        Status?: Schemas.NodeStatus;
        ManagerStatus?: Schemas.ManagerStatus;
    }
    /**
     * NodeDescription encapsulates the properties of the Node as reported by the
     * agent.
     */
    export interface NodeDescription {
        Hostname?: string;
        Platform?: Schemas.Platform;
        Resources?: Schemas.ResourceObject;
        Engine?: Schemas.EngineDescription;
        TLSInfo?: Schemas.TLSInfo;
    }
    /** Platform represents the platform (Arch/OS). */
    export interface Platform {
        /**
         * Architecture represents the hardware architecture (for example,
         * `x86_64`).
         */
        Architecture?: string;
        /** OS represents the Operating System (for example, `linux` or `windows`). */
        OS?: string;
    }
    /** EngineDescription provides information about an engine. */
    export interface EngineDescription {
        EngineVersion?: string;
        Labels?: {
            [key: string]: string;
        };
        Plugins?: {
            Type?: string;
            Name?: string;
        }[];
    }
    /** Information about the issuer of leaf TLS certificates and the trusted root CA certificate */
    export interface TLSInfo {
        /** The root CA certificate(s) that are used to validate leaf TLS certificates */
        TrustRoot?: string;
        /** The base64-url-safe-encoded raw subject bytes of the issuer */
        CertIssuerSubject?: string;
        /** The base64-url-safe-encoded raw public key bytes of the issuer */
        CertIssuerPublicKey?: string;
    }
    /**
     * NodeStatus represents the status of a node.
     *
     * It provides the current status of the node, as seen by the manager.
     */
    export interface NodeStatus {
        State?: Schemas.NodeState;
        Message?: string;
        /** IP address of the node. */
        Addr?: string;
    }
    /** NodeState represents the state of a node. */
    export type NodeState = "unknown" | "down" | "ready" | "disconnected";
    /**
     * ManagerStatus represents the status of a manager.
     *
     * It provides the current status of a node's manager component, if the node
     * is a manager.
     */
    export interface ManagerStatus {
        Leader?: boolean;
        Reachability?: Schemas.Reachability;
        /** The IP address and port at which the manager is reachable. */
        Addr?: string;
    }
    /** Reachability represents the reachability of a node. */
    export type Reachability = "unknown" | "unreachable" | "reachable";
    /** User modifiable swarm configuration. */
    export interface SwarmSpec {
        /** Name of the swarm. */
        Name?: string;
        /** User-defined key/value metadata. */
        Labels?: {
            [key: string]: string;
        };
        /** Orchestration configuration. */
        Orchestration?: {
            /** The number of historic tasks to keep per instance or node. If negative, never remove completed or failed tasks. */
            TaskHistoryRetentionLimit?: number;
        } | null;
        /** Raft configuration. */
        Raft?: {
            /** The number of log entries between snapshots. */
            SnapshotInterval?: number;
            /** The number of snapshots to keep beyond the current snapshot. */
            KeepOldSnapshots?: number;
            /** The number of log entries to keep around to sync up slow followers after a snapshot is created. */
            LogEntriesForSlowFollowers?: number;
            /**
             * The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.
             *
             * A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
             */
            ElectionTick?: number;
            /**
             * The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.
             *
             * A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
             */
            HeartbeatTick?: number;
        };
        /** Dispatcher configuration. */
        Dispatcher?: {
            /** The delay for an agent to send a heartbeat to the dispatcher. */
            HeartbeatPeriod?: number;
        } | null;
        /** CA configuration. */
        CAConfig?: {
            /** The duration node certificates are issued for. */
            NodeCertExpiry?: number;
            /** Configuration for forwarding signing requests to an external certificate authority. */
            ExternalCAs?: {
                /** Protocol for communication with the external CA (currently only `cfssl` is supported). */
                Protocol?: "cfssl";
                /** URL where certificate signing requests should be sent. */
                URL?: string;
                /** An object with key/value pairs that are interpreted as protocol-specific options for the external CA driver. */
                Options?: {
                    [key: string]: string;
                };
                /** The root CA certificate (in PEM format) this external CA uses to issue TLS certificates (assumed to be to the current swarm root CA certificate if not provided). */
                CACert?: string;
            }[];
            /** The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format. */
            SigningCACert?: string;
            /** The desired signing CA key for all swarm node TLS leaf certificates, in PEM format. */
            SigningCAKey?: string;
            /** An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey` */
            ForceRotate?: number;
        } | null;
        /** Parameters related to encryption-at-rest. */
        EncryptionConfig?: {
            /** If set, generate a key and use it to lock data stored on the managers. */
            AutoLockManagers?: boolean;
        };
        /** Defaults for creating tasks in this cluster. */
        TaskDefaults?: {
            /**
             * The log driver to use for tasks created in the orchestrator if
             * unspecified by a service.
             *
             * Updating this value only affects new tasks. Existing tasks continue
             * to use their previously configured log driver until recreated.
             */
            LogDriver?: {
                /** The log driver to use as a default for new tasks. */
                Name?: string;
                /**
                 * Driver-specific options for the selectd log driver, specified
                 * as key/value pairs.
                 */
                Options?: {
                    [key: string]: string;
                };
            };
        };
    }
    /**
     * ClusterInfo represents information about the swarm as is returned by the
     * "/info" endpoint. Join-tokens are not included.
     */
    export interface ClusterInfo {
        /** The ID of the swarm. */
        ID?: string;
        Version?: Schemas.ObjectVersion;
        /**
         * Date and time at which the swarm was initialised in
         * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
         */
        CreatedAt?: string;
        /**
         * Date and time at which the swarm was last updated in
         * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
         */
        UpdatedAt?: string;
        Spec?: Schemas.SwarmSpec;
        TLSInfo?: Schemas.TLSInfo;
        /** Whether there is currently a root CA rotation in progress for the swarm */
        RootRotationInProgress?: boolean;
    }
    /** JoinTokens contains the tokens workers and managers need to join the swarm. */
    export interface JoinTokens {
        /** The token workers can use to join the swarm. */
        Worker?: string;
        /** The token managers can use to join the swarm. */
        Manager?: string;
    }
    export type Swarm = Schemas.ClusterInfo & {
        JoinTokens?: Schemas.JoinTokens;
    };
    /** User modifiable task configuration. */
    export interface TaskSpec {
        /**
         * Plugin spec for the service.  *(Experimental release only.)*
         *
         * <p><br /></p>
         *
         * > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
         * > mutually exclusive. PluginSpec is only used when the Runtime field
         * > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
         * > field is set to `attachment`.
         */
        PluginSpec?: {
            /** The name or 'alias' to use for the plugin. */
            Name?: string;
            /** The plugin image reference to use. */
            Remote?: string;
            /** Disable the plugin once scheduled. */
            Disabled?: boolean;
            PluginPrivilege?: {
                Name?: string;
                Description?: string;
                Value?: string[];
            }[];
        };
        /**
         * Container spec for the service.
         *
         * <p><br /></p>
         *
         * > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
         * > mutually exclusive. PluginSpec is only used when the Runtime field
         * > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
         * > field is set to `attachment`.
         */
        ContainerSpec?: {
            /** The image name to use for the container */
            Image?: string;
            /** User-defined key/value data. */
            Labels?: {
                [key: string]: string;
            };
            /** The command to be run in the image. */
            Command?: string[];
            /** Arguments to the command. */
            Args?: string[];
            /** The hostname to use for the container, as a valid RFC 1123 hostname. */
            Hostname?: string;
            /** A list of environment variables in the form `VAR=value`. */
            Env?: string[];
            /** The working directory for commands to run in. */
            Dir?: string;
            /** The user inside the container. */
            User?: string;
            /** A list of additional groups that the container process will run as. */
            Groups?: string[];
            /** Security options for the container */
            Privileges?: {
                /** CredentialSpec for managed service account (Windows only) */
                CredentialSpec?: {
                    /**
                     * Load credential spec from this file. The file is read by the daemon, and must be present in the
                     * `CredentialSpecs` subdirectory in the docker data directory, which defaults to
                     * `C:\ProgramData\Docker\` on Windows.
                     *
                     * For example, specifying `spec.json` loads `C:\ProgramData\Docker\CredentialSpecs\spec.json`.
                     *
                     * <p><br /></p>
                     *
                     * > **Note**: `CredentialSpec.File` and `CredentialSpec.Registry` are mutually exclusive.
                     */
                    File?: string;
                    /**
                     * Load credential spec from this value in the Windows registry. The specified registry value must be
                     * located in:
                     *
                     * `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs`
                     *
                     * <p><br /></p>
                     *
                     *
                     * > **Note**: `CredentialSpec.File` and `CredentialSpec.Registry` are mutually exclusive.
                     */
                    Registry?: string;
                };
                /** SELinux labels of the container */
                SELinuxContext?: {
                    /** Disable SELinux */
                    Disable?: boolean;
                    /** SELinux user label */
                    User?: string;
                    /** SELinux role label */
                    Role?: string;
                    /** SELinux type label */
                    Type?: string;
                    /** SELinux level label */
                    Level?: string;
                };
            };
            /** Whether a pseudo-TTY should be allocated. */
            TTY?: boolean;
            /** Open `stdin` */
            OpenStdin?: boolean;
            /** Mount the container's root filesystem as read only. */
            ReadOnly?: boolean;
            /** Specification for mounts to be added to containers created as part of the service. */
            Mounts?: Schemas.Mount[];
            /** Signal to stop the container. */
            StopSignal?: string;
            /** Amount of time to wait for the container to terminate before forcefully killing it. */
            StopGracePeriod?: number;
            HealthCheck?: Schemas.HealthConfig;
            /**
             * A list of hostname/IP mappings to add to the container's `hosts`
             * file. The format of extra hosts is specified in the
             * [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)
             * man page:
             *
             *     IP_address canonical_hostname [aliases...]
             */
            Hosts?: string[];
            /** Specification for DNS related configurations in resolver configuration file (`resolv.conf`). */
            DNSConfig?: {
                /** The IP addresses of the name servers. */
                Nameservers?: string[];
                /** A search list for host-name lookup. */
                Search?: string[];
                /** A list of internal resolver variables to be modified (e.g., `debug`, `ndots:3`, etc.). */
                Options?: string[];
            };
            /** Secrets contains references to zero or more secrets that will be exposed to the service. */
            Secrets?: {
                /** File represents a specific target that is backed by a file. */
                File?: {
                    /** Name represents the final filename in the filesystem. */
                    Name?: string;
                    /** UID represents the file UID. */
                    UID?: string;
                    /** GID represents the file GID. */
                    GID?: string;
                    /** Mode represents the FileMode of the file. */
                    Mode?: number;
                };
                /** SecretID represents the ID of the specific secret that we're referencing. */
                SecretID?: string;
                /**
                 * SecretName is the name of the secret that this references, but this is just provided for
                 * lookup/display purposes. The secret in the reference will be identified by its ID.
                 */
                SecretName?: string;
            }[];
            /** Configs contains references to zero or more configs that will be exposed to the service. */
            Configs?: {
                /** File represents a specific target that is backed by a file. */
                File?: {
                    /** Name represents the final filename in the filesystem. */
                    Name?: string;
                    /** UID represents the file UID. */
                    UID?: string;
                    /** GID represents the file GID. */
                    GID?: string;
                    /** Mode represents the FileMode of the file. */
                    Mode?: number;
                };
                /** ConfigID represents the ID of the specific config that we're referencing. */
                ConfigID?: string;
                /**
                 * ConfigName is the name of the config that this references, but this is just provided for
                 * lookup/display purposes. The config in the reference will be identified by its ID.
                 */
                ConfigName?: string;
            }[];
            /** Isolation technology of the containers running the service. (Windows only) */
            Isolation?: "default" | "process" | "hyperv";
            /** Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. */
            Init?: boolean | null;
        };
        /**
         * Read-only spec type for non-swarm containers attached to swarm overlay
         * networks.
         *
         * <p><br /></p>
         *
         * > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
         * > mutually exclusive. PluginSpec is only used when the Runtime field
         * > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
         * > field is set to `attachment`.
         */
        NetworkAttachmentSpec?: {
            /** ID of the container represented by this task */
            ContainerID?: string;
        };
        /** Resource requirements which apply to each individual container created as part of the service. */
        Resources?: {
            Limits?: Schemas.ResourceObject;
            Reservation?: Schemas.ResourceObject;
        };
        /** Specification for the restart policy which applies to containers created as part of this service. */
        RestartPolicy?: {
            /** Condition for restart. */
            Condition?: "none" | "on-failure" | "any";
            /** Delay between restart attempts. */
            Delay?: number;
            /** Maximum attempts to restart a given container before giving up (default value is 0, which is ignored). */
            MaxAttempts?: number;
            /** Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded). */
            Window?: number;
        };
        Placement?: {
            /** An array of constraints. */
            Constraints?: string[];
            /** Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence. */
            Preferences?: {
                Spread?: {
                    /** label descriptor, such as engine.labels.az */
                    SpreadDescriptor?: string;
                };
            }[];
            /**
             * Platforms stores all the platforms that the service's image can
             * run on. This field is used in the platform filter for scheduling.
             * If empty, then the platform filter is off, meaning there are no
             * scheduling restrictions.
             */
            Platforms?: Schemas.Platform[];
        };
        /** A counter that triggers an update even if no relevant parameters have been changed. */
        ForceUpdate?: number;
        /** Runtime is the type of runtime specified for the task executor. */
        Runtime?: string;
        Networks?: {
            Target?: string;
            Aliases?: string[];
        }[];
        /** Specifies the log driver to use for tasks created from this spec. If not present, the default one for the swarm will be used, finally falling back to the engine default if not specified. */
        LogDriver?: {
            Name?: string;
            Options?: {
                [key: string]: string;
            };
        };
    }
    export type TaskState = "new" | "allocated" | "pending" | "assigned" | "accepted" | "preparing" | "ready" | "starting" | "running" | "complete" | "shutdown" | "failed" | "rejected" | "remove" | "orphaned";
    export interface Task {
        /** The ID of the task. */
        ID?: string;
        Version?: Schemas.ObjectVersion;
        CreatedAt?: string;
        UpdatedAt?: string;
        /** Name of the task. */
        Name?: string;
        /** User-defined key/value metadata. */
        Labels?: {
            [key: string]: string;
        };
        Spec?: Schemas.TaskSpec;
        /** The ID of the service this task is part of. */
        ServiceID?: string;
        Slot?: number;
        /** The ID of the node that this task is on. */
        NodeID?: string;
        AssignedGenericResources?: Schemas.GenericResources;
        Status?: {
            Timestamp?: string;
            State?: Schemas.TaskState;
            Message?: string;
            Err?: string;
            ContainerStatus?: {
                ContainerID?: string;
                PID?: number;
                ExitCode?: number;
            };
        };
        DesiredState?: Schemas.TaskState;
    }
    /** User modifiable configuration for a service. */
    export interface ServiceSpec {
        /** Name of the service. */
        Name?: string;
        /** User-defined key/value metadata. */
        Labels?: {
            [key: string]: string;
        };
        TaskTemplate?: Schemas.TaskSpec;
        /** Scheduling mode for the service. */
        Mode?: {
            Replicated?: {
                Replicas?: number;
            };
            Global?: {};
        };
        /** Specification for the update strategy of the service. */
        UpdateConfig?: {
            /** Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism). */
            Parallelism?: number;
            /** Amount of time between updates, in nanoseconds. */
            Delay?: number;
            /** Action to take if an updated task fails to run, or stops running during the update. */
            FailureAction?: "continue" | "pause" | "rollback";
            /** Amount of time to monitor each updated task for failures, in nanoseconds. */
            Monitor?: number;
            /** The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1. */
            MaxFailureRatio?: number;
            /** The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down. */
            Order?: "stop-first" | "start-first";
        };
        /** Specification for the rollback strategy of the service. */
        RollbackConfig?: {
            /** Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism). */
            Parallelism?: number;
            /** Amount of time between rollback iterations, in nanoseconds. */
            Delay?: number;
            /** Action to take if an rolled back task fails to run, or stops running during the rollback. */
            FailureAction?: "continue" | "pause";
            /** Amount of time to monitor each rolled back task for failures, in nanoseconds. */
            Monitor?: number;
            /** The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1. */
            MaxFailureRatio?: number;
            /** The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down. */
            Order?: "stop-first" | "start-first";
        };
        /** Array of network names or IDs to attach the service to. */
        Networks?: {
            Target?: string;
            Aliases?: string[];
        }[];
        EndpointSpec?: Schemas.EndpointSpec;
    }
    export interface EndpointPortConfig {
        Name?: string;
        Protocol?: "tcp" | "udp" | "sctp";
        /** The port inside the container. */
        TargetPort?: number;
        /** The port on the swarm hosts. */
        PublishedPort?: number;
        /**
         * The mode in which port is published.
         *
         * <p><br /></p>
         *
         * - "ingress" makes the target port accessible on on every node,
         *   regardless of whether there is a task for the service running on
         *   that node or not.
         * - "host" bypasses the routing mesh and publish the port directly on
         *   the swarm node where that service is running.
         */
        PublishMode?: "ingress" | "host";
    }
    /** Properties that can be configured to access and load balance a service. */
    export interface EndpointSpec {
        /** The mode of resolution to use for internal load balancing between tasks. */
        Mode?: "vip" | "dnsrr";
        /** List of exposed ports that this service is accessible on from the outside. Ports can only be provided if `vip` resolution mode is used. */
        Ports?: Schemas.EndpointPortConfig[];
    }
    export interface Service {
        ID?: string;
        Version?: Schemas.ObjectVersion;
        CreatedAt?: string;
        UpdatedAt?: string;
        Spec?: Schemas.ServiceSpec;
        Endpoint?: {
            Spec?: Schemas.EndpointSpec;
            Ports?: Schemas.EndpointPortConfig[];
            VirtualIPs?: {
                NetworkID?: string;
                Addr?: string;
            }[];
        };
        /** The status of a service update. */
        UpdateStatus?: {
            State?: "updating" | "paused" | "completed";
            StartedAt?: string;
            CompletedAt?: string;
            Message?: string;
        };
    }
    export interface ImageDeleteResponseItem {
        /** The image ID of an image that was untagged */
        Untagged?: string;
        /** The image ID of an image that was deleted */
        Deleted?: string;
    }
    export interface ServiceUpdateResponse {
        /** Optional warning messages */
        Warnings?: string[];
    }
    export type ContainerSummary = {
        /** The ID of this container */
        Id?: string;
        /** The names that this container has been given */
        Names?: string[];
        /** The name of the image used when creating this container */
        Image?: string;
        /** The ID of the image that this container was created from */
        ImageID?: string;
        /** Command to run when starting the container */
        Command?: string;
        /** When the container was created */
        Created?: number;
        /** The ports exposed by this container */
        Ports?: Schemas.Port[];
        /** The size of files that have been created or changed by this container */
        SizeRw?: number;
        /** The total size of all the files in this container */
        SizeRootFs?: number;
        /** User-defined key/value metadata. */
        Labels?: {
            [key: string]: string;
        };
        /** The state of this container (e.g. `Exited`) */
        State?: string;
        /** Additional human-readable status of this container (e.g. `Exit 0`) */
        Status?: string;
        HostConfig?: {
            NetworkMode?: string;
        };
        /** A summary of the container's network settings */
        NetworkSettings?: {
            Networks?: {
                [key: string]: Schemas.EndpointSettings;
            };
        };
        Mounts?: Schemas.Mount[];
    }[];
    /** Driver represents a driver (network, logging, secrets). */
    export interface Driver {
        /** Name of the driver. */
        Name: string;
        /** Key/value map of driver-specific options. */
        Options?: {
            [key: string]: string;
        };
    }
    export interface SecretSpec {
        /** User-defined name of the secret. */
        Name?: string;
        /** User-defined key/value metadata. */
        Labels?: {
            [key: string]: string;
        };
        /**
         * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))
         * data to store as secret.
         *
         * This field is only used to _create_ a secret, and is not returned by
         * other endpoints.
         */
        Data?: string;
        Driver?: Schemas.Driver;
        Templating?: Schemas.Driver;
    }
    export interface Secret {
        ID?: string;
        Version?: Schemas.ObjectVersion;
        CreatedAt?: string;
        UpdatedAt?: string;
        Spec?: Schemas.SecretSpec;
    }
    export interface ConfigSpec {
        /** User-defined name of the config. */
        Name?: string;
        /** User-defined key/value metadata. */
        Labels?: {
            [key: string]: string;
        };
        /**
         * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))
         * config data.
         */
        Data?: string;
        Templating?: Schemas.Driver;
    }
    export interface Config {
        ID?: string;
        Version?: Schemas.ObjectVersion;
        CreatedAt?: string;
        UpdatedAt?: string;
        Spec?: Schemas.ConfigSpec;
    }
    export interface SystemInfo {
        /**
         * Unique identifier of the daemon.
         *
         * <p><br /></p>
         *
         * > **Note**: The format of the ID itself is not part of the API, and
         * > should not be considered stable.
         */
        ID?: string;
        /** Total number of containers on the host. */
        Containers?: number;
        /** Number of containers with status `"running"`. */
        ContainersRunning?: number;
        /** Number of containers with status `"paused"`. */
        ContainersPaused?: number;
        /** Number of containers with status `"stopped"`. */
        ContainersStopped?: number;
        /**
         * Total number of images on the host.
         *
         * Both _tagged_ and _untagged_ (dangling) images are counted.
         */
        Images?: number;
        /** Name of the storage driver in use. */
        Driver?: string;
        /**
         * Information specific to the storage driver, provided as
         * "label" / "value" pairs.
         *
         * This information is provided by the storage driver, and formatted
         * in a way consistent with the output of `docker info` on the command
         * line.
         *
         * <p><br /></p>
         *
         * > **Note**: The information returned in this field, including the
         * > formatting of values and labels, should not be considered stable,
         * > and may change without notice.
         */
        DriverStatus?: string[][];
        /**
         * Root directory of persistent Docker state.
         *
         * Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker`
         * on Windows.
         */
        DockerRootDir?: string;
        /**
         * Status information about this node (standalone Swarm API).
         *
         * <p><br /></p>
         *
         * > **Note**: The information returned in this field is only propagated
         * > by the Swarm standalone API, and is empty (`null`) when using
         * > built-in swarm mode.
         */
        SystemStatus?: string[][];
        Plugins?: Schemas.PluginsInfo;
        /** Indicates if the host has memory limit support enabled. */
        MemoryLimit?: boolean;
        /** Indicates if the host has memory swap limit support enabled. */
        SwapLimit?: boolean;
        /** Indicates if the host has kernel memory limit support enabled. */
        KernelMemory?: boolean;
        /** Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. */
        CpuCfsPeriod?: boolean;
        /** Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. */
        CpuCfsQuota?: boolean;
        /** Indicates if CPU Shares limiting is supported by the host. */
        CPUShares?: boolean;
        /**
         * Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.
         *
         * See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
         */
        CPUSet?: boolean;
        /** Indicates if OOM killer disable is supported on the host. */
        OomKillDisable?: boolean;
        /** Indicates IPv4 forwarding is enabled. */
        IPv4Forwarding?: boolean;
        /** Indicates if `bridge-nf-call-iptables` is available on the host. */
        BridgeNfIptables?: boolean;
        /** Indicates if `bridge-nf-call-ip6tables` is available on the host. */
        BridgeNfIp6tables?: boolean;
        /** Indicates if the daemon is running in debug-mode / with debug-level logging enabled. */
        Debug?: boolean;
        /**
         * The total number of file Descriptors in use by the daemon process.
         *
         * This information is only returned if debug-mode is enabled.
         */
        NFd?: number;
        /**
         * The  number of goroutines that currently exist.
         *
         * This information is only returned if debug-mode is enabled.
         */
        NGoroutines?: number;
        /**
         * Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
         * format with nano-seconds.
         */
        SystemTime?: string;
        /** The logging driver to use as a default for new containers. */
        LoggingDriver?: string;
        /** The driver to use for managing cgroups. */
        CgroupDriver?: "cgroupfs" | "systemd";
        /** Number of event listeners subscribed. */
        NEventsListener?: number;
        /**
         * Kernel version of the host.
         *
         * On Linux, this information obtained from `uname`. On Windows this
         * information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\</kbd>
         * registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.
         */
        KernelVersion?: string;
        /**
         * Name of the host's operating system, for example: "Ubuntu 16.04.2 LTS"
         * or "Windows Server 2016 Datacenter"
         */
        OperatingSystem?: string;
        /**
         * Generic type of the operating system of the host, as returned by the
         * Go runtime (`GOOS`).
         *
         * Currently returned values are "linux" and "windows". A full list of
         * possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
         */
        OSType?: string;
        /**
         * Hardware architecture of the host, as returned by the Go runtime
         * (`GOARCH`).
         *
         * A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
         */
        Architecture?: string;
        /**
         * The number of logical CPUs usable by the daemon.
         *
         * The number of available CPUs is checked by querying the operating
         * system when the daemon starts. Changes to operating system CPU
         * allocation after the daemon is started are not reflected.
         */
        NCPU?: number;
        /** Total amount of physical memory available on the host, in bytes. */
        MemTotal?: number;
        /**
         * Address / URL of the index server that is used for image search,
         * and as a default for user authentication for Docker Hub and Docker Cloud.
         */
        IndexServerAddress?: string;
        RegistryConfig?: Schemas.RegistryServiceConfig;
        GenericResources?: Schemas.GenericResources;
        /**
         * HTTP-proxy configured for the daemon. This value is obtained from the
         * [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
         *
         * Containers do not automatically inherit this configuration.
         */
        HttpProxy?: string;
        /**
         * HTTPS-proxy configured for the daemon. This value is obtained from the
         * [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
         *
         * Containers do not automatically inherit this configuration.
         */
        HttpsProxy?: string;
        /**
         * Comma-separated list of domain extensions for which no proxy should be
         * used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
         * environment variable.
         *
         * Containers do not automatically inherit this configuration.
         */
        NoProxy?: string;
        /** Hostname of the host. */
        Name?: string;
        /**
         * User-defined labels (key/value metadata) as set on the daemon.
         *
         * <p><br /></p>
         *
         * > **Note**: When part of a Swarm, nodes can both have _daemon_ labels,
         * > set through the daemon configuration, and _node_ labels, set from a
         * > manager node in the Swarm. Node labels are not included in this
         * > field. Node labels can be retrieved using the `/nodes/(id)` endpoint
         * > on a manager node in the Swarm.
         */
        Labels?: string[];
        /** Indicates if experimental features are enabled on the daemon. */
        ExperimentalBuild?: boolean;
        /**
         * Version string of the daemon.
         *
         * > **Note**: the [standalone Swarm API](/swarm/swarm-api/)
         * > returns the Swarm version instead of the daemon  version, for example
         * > `swarm/1.2.8`.
         */
        ServerVersion?: string;
        /**
         * URL of the distributed storage backend.
         *
         *
         * The storage backend is used for multihost networking (to store
         * network and endpoint information) and by the node discovery mechanism.
         *
         * <p><br /></p>
         *
         * > **Note**: This field is only propagated when using standalone Swarm
         * > mode, and overlay networking using an external k/v store. Overlay
         * > networks with Swarm mode enabled use the built-in raft store, and
         * > this field will be empty.
         */
        ClusterStore?: string;
        /**
         * The network endpoint that the Engine advertises for the purpose of
         * node discovery. ClusterAdvertise is a `host:port` combination on which
         * the daemon is reachable by other hosts.
         *
         * <p><br /></p>
         *
         * > **Note**: This field is only propagated when using standalone Swarm
         * > mode, and overlay networking using an external k/v store. Overlay
         * > networks with Swarm mode enabled use the built-in raft store, and
         * > this field will be empty.
         */
        ClusterAdvertise?: string;
        /**
         * List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
         * runtimes configured on the daemon. Keys hold the "name" used to
         * reference the runtime.
         *
         * The Docker daemon relies on an OCI compliant runtime (invoked via the
         * `containerd` daemon) as its interface to the Linux kernel namespaces,
         * cgroups, and SELinux.
         *
         * The default runtime is `runc`, and automatically configured. Additional
         * runtimes can be configured by the user and will be listed here.
         */
        Runtimes?: {
            [key: string]: Schemas.Runtime;
        };
        /**
         * Name of the default OCI runtime that is used when starting containers.
         *
         * The default can be overridden per-container at create time.
         */
        DefaultRuntime?: string;
        Swarm?: Schemas.SwarmInfo;
        /**
         * Indicates if live restore is enabled.
         *
         * If enabled, containers are kept running when the daemon is shutdown
         * or upon daemon start if running containers are detected.
         */
        LiveRestoreEnabled?: boolean;
        /**
         * Represents the isolation technology to use as a default for containers.
         * The supported values are platform-specific.
         *
         * If no isolation value is specified on daemon start, on Windows client,
         * the default is `hyperv`, and on Windows server, the default is `process`.
         *
         * This option is currently not used on other platforms.
         */
        Isolation?: "default" | "hyperv" | "process";
        /**
         * Name and, optional, path of the `docker-init` binary.
         *
         * If the path is omitted, the daemon searches the host's `$PATH` for the
         * binary and uses the first result.
         */
        InitBinary?: string;
        ContainerdCommit?: Schemas.Commit;
        RuncCommit?: Schemas.Commit;
        InitCommit?: Schemas.Commit;
        /**
         * List of security features that are enabled on the daemon, such as
         * apparmor, seccomp, SELinux, and user-namespaces (userns).
         *
         * Additional configuration options for each security feature may
         * be present, and are included as a comma-separated list of key/value
         * pairs.
         */
        SecurityOptions?: string[];
    }
    /**
     * Available plugins per type.
     *
     * <p><br /></p>
     *
     * > **Note**: Only unmanaged (V1) plugins are included in this list.
     * > V1 plugins are "lazily" loaded, and are not returned in this list
     * > if there is no resource using the plugin.
     */
    export interface PluginsInfo {
        /** Names of available volume-drivers, and network-driver plugins. */
        Volume?: string[];
        /** Names of available network-drivers, and network-driver plugins. */
        Network?: string[];
        /** Names of available authorization plugins. */
        Authorization?: string[];
        /** Names of available logging-drivers, and logging-driver plugins. */
        Log?: string[];
    }
    /** RegistryServiceConfig stores daemon registry services configuration. */
    export interface RegistryServiceConfig {
        /**
         * List of IP ranges to which nondistributable artifacts can be pushed,
         * using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).
         *
         * Some images (for example, Windows base images) contain artifacts
         * whose distribution is restricted by license. When these images are
         * pushed to a registry, restricted artifacts are not included.
         *
         * This configuration override this behavior, and enables the daemon to
         * push nondistributable artifacts to all registries whose resolved IP
         * address is within the subnet described by the CIDR syntax.
         *
         * This option is useful when pushing images containing
         * nondistributable artifacts to a registry on an air-gapped network so
         * hosts on that network can pull the images without connecting to
         * another server.
         *
         * > **Warning**: Nondistributable artifacts typically have restrictions
         * > on how and where they can be distributed and shared. Only use this
         * > feature to push artifacts to private registries and ensure that you
         * > are in compliance with any terms that cover redistributing
         * > nondistributable artifacts.
         */
        AllowNondistributableArtifactsCIDRs?: string[];
        /**
         * List of registry hostnames to which nondistributable artifacts can be
         * pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.
         *
         * Some images (for example, Windows base images) contain artifacts
         * whose distribution is restricted by license. When these images are
         * pushed to a registry, restricted artifacts are not included.
         *
         * This configuration override this behavior for the specified
         * registries.
         *
         * This option is useful when pushing images containing
         * nondistributable artifacts to a registry on an air-gapped network so
         * hosts on that network can pull the images without connecting to
         * another server.
         *
         * > **Warning**: Nondistributable artifacts typically have restrictions
         * > on how and where they can be distributed and shared. Only use this
         * > feature to push artifacts to private registries and ensure that you
         * > are in compliance with any terms that cover redistributing
         * > nondistributable artifacts.
         */
        AllowNondistributableArtifactsHostnames?: string[];
        /**
         * List of IP ranges of insecure registries, using the CIDR syntax
         * ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries
         * accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates
         * from unknown CAs) communication.
         *
         * By default, local registries (`127.0.0.0/8`) are configured as
         * insecure. All other registries are secure. Communicating with an
         * insecure registry is not possible if the daemon assumes that registry
         * is secure.
         *
         * This configuration override this behavior, insecure communication with
         * registries whose resolved IP address is within the subnet described by
         * the CIDR syntax.
         *
         * Registries can also be marked insecure by hostname. Those registries
         * are listed under `IndexConfigs` and have their `Secure` field set to
         * `false`.
         *
         * > **Warning**: Using this option can be useful when running a local
         * > registry, but introduces security vulnerabilities. This option
         * > should therefore ONLY be used for testing purposes. For increased
         * > security, users should add their CA to their system's list of trusted
         * > CAs instead of enabling this option.
         */
        InsecureRegistryCIDRs?: string[];
        IndexConfigs?: {
            [key: string]: Schemas.IndexInfo;
        };
        /**
         * List of registry URLs that act as a mirror for the official
         * (`docker.io`) registry.
         */
        Mirrors?: string[];
    }
    /** IndexInfo contains information about a registry. */
    export interface IndexInfo {
        /** Name of the registry, such as "docker.io". */
        Name?: string;
        /** List of mirrors, expressed as URIs. */
        Mirrors?: string[];
        /**
         * Indicates if the registry is part of the list of insecure
         * registries.
         *
         * If `false`, the registry is insecure. Insecure registries accept
         * un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from
         * unknown CAs) communication.
         *
         * > **Warning**: Insecure registries can be useful when running a local
         * > registry. However, because its use creates security vulnerabilities
         * > it should ONLY be enabled for testing purposes. For increased
         * > security, users should add their CA to their system's list of
         * > trusted CAs instead of enabling this option.
         */
        Secure?: boolean;
        /** Indicates whether this is an official registry (i.e., Docker Hub / docker.io) */
        Official?: boolean;
    }
    /**
     * Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)
     * runtime.
     *
     * The runtime is invoked by the daemon via the `containerd` daemon. OCI
     * runtimes act as an interface to the Linux kernel namespaces, cgroups,
     * and SELinux.
     */
    export interface Runtime {
        /**
         * Name and, optional, path, of the OCI executable binary.
         *
         * If the path is omitted, the daemon searches the host's `$PATH` for the
         * binary and uses the first result.
         */
        path?: string;
        /** List of command-line arguments to pass to the runtime when invoked. */
        runtimeArgs?: string[] | null;
    }
    /**
     * Commit holds the Git-commit (SHA1) that a binary was built from, as
     * reported in the version-string of external tools, such as `containerd`,
     * or `runC`.
     */
    export interface Commit {
        /** Actual commit ID of external tool. */
        ID?: string;
        /** Commit ID of external tool expected by dockerd as set at build time. */
        Expected?: string;
    }
    /** Represents generic information about swarm. */
    export interface SwarmInfo {
        /** Unique identifier of for this node in the swarm. */
        NodeID?: string;
        /**
         * IP address at which this node can be reached by other nodes in the
         * swarm.
         */
        NodeAddr?: string;
        LocalNodeState?: Schemas.LocalNodeState;
        ControlAvailable?: boolean;
        Error?: string;
        /** List of ID's and addresses of other managers in the swarm. */
        RemoteManagers?: Schemas.PeerNode[] | null;
        /** Total number of nodes in the swarm. */
        Nodes?: number | null;
        /** Total number of managers in the swarm. */
        Managers?: number | null;
        Cluster?: Schemas.ClusterInfo;
    }
    /** Current local status of this node. */
    export type LocalNodeState = "" | "inactive" | "pending" | "active" | "error" | "locked";
    /** Represents a peer-node in the swarm */
    export interface PeerNode {
        /** Unique identifier of for this node in the swarm. */
        NodeID?: string;
        /** IP address and ports at which this node can be reached. */
        Addr?: string;
    }
}
export namespace RequestBodies {
    export namespace PluginPullBody {
        export interface Content {
            "application/json": {
                Name?: string;
                Description?: string;
                Value?: string[];
            }[];
            "text/plain": {
                Name?: string;
                Description?: string;
                Value?: string[];
            }[];
        }
    }
}
export interface Parameter$ContainerList {
    /** Return all containers. By default, only running containers are shown */
    all?: boolean;
    /** Return this number of most recently created containers, including non-running ones. */
    limit?: number;
    /** Return the size of container as fields `SizeRw` and `SizeRootFs`. */
    size?: boolean;
    /**
     * Filters to process on the container list, encoded as JSON (a `map[string][]string`). For example, `{"status": ["paused"]}` will only return paused containers. Available filters:
     *
     * - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
     * - `before`=(`<container id>` or `<container name>`)
     * - `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
     * - `exited=<int>` containers with exit code of `<int>`
     * - `health`=(`starting`|`healthy`|`unhealthy`|`none`)
     * - `id=<ID>` a container's ID
     * - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)
     * - `is-task=`(`true`|`false`)
     * - `label=key` or `label="key=value"` of a container label
     * - `name=<name>` a container's name
     * - `network`=(`<network id>` or `<network name>`)
     * - `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
     * - `since`=(`<container id>` or `<container name>`)
     * - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)
     * - `volume`=(`<volume name>` or `<mount point destination>`)
     */
    filters?: string;
}
export interface Response$ContainerList$Status$200 {
    "application/json": Schemas.ContainerSummary;
}
export interface Response$ContainerList$Status$400 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerList$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ContainerCreate {
    /** Assign the specified name to the container. Must match `/?[a-zA-Z0-9_-]+`. */
    name?: string;
}
export interface RequestBody$ContainerCreate {
    "application/json": Schemas.ContainerConfig & {
        HostConfig?: Schemas.HostConfig;
        /** This container's networking configuration. */
        NetworkingConfig?: {
            /** A mapping of network name to endpoint configuration for that network. */
            EndpointsConfig?: {
                [key: string]: Schemas.EndpointSettings;
            };
        };
    };
    "application/octet-stream": Schemas.ContainerConfig & {
        HostConfig?: Schemas.HostConfig;
        /** This container's networking configuration. */
        NetworkingConfig?: {
            /** A mapping of network name to endpoint configuration for that network. */
            EndpointsConfig?: {
                [key: string]: Schemas.EndpointSettings;
            };
        };
    };
}
export interface Response$ContainerCreate$Status$201 {
    /** OK response to ContainerCreate operation */
    "application/json": {
        /** The ID of the created container */
        Id: string;
        /** Warnings encountered when creating the container */
        Warnings: string[];
    };
}
export interface Response$ContainerCreate$Status$400 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerCreate$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerCreate$Status$409 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerCreate$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ContainerInspect {
    /** ID or name of the container */
    id: string;
    /** Return the size of container as fields `SizeRw` and `SizeRootFs` */
    size?: boolean;
}
export interface Response$ContainerInspect$Status$200 {
    "application/json": {
        /** The ID of the container */
        Id?: string;
        /** The time the container was created */
        Created?: string;
        /** The path to the command being run */
        Path?: string;
        /** The arguments to the command being run */
        Args?: string[];
        /** The state of the container. */
        State?: {
            /** The status of the container. For example, `"running"` or `"exited"`. */
            Status?: "created" | "running" | "paused" | "restarting" | "removing" | "exited" | "dead";
            /**
             * Whether this container is running.
             *
             * Note that a running container can be _paused_. The `Running` and `Paused`
             * booleans are not mutually exclusive:
             *
             * When pausing a container (on Linux), the cgroups freezer is used to suspend
             * all processes in the container. Freezing the process requires the process to
             * be running. As a result, paused containers are both `Running` _and_ `Paused`.
             *
             * Use the `Status` field instead to determine if a container's state is "running".
             */
            Running?: boolean;
            /** Whether this container is paused. */
            Paused?: boolean;
            /** Whether this container is restarting. */
            Restarting?: boolean;
            /** Whether this container has been killed because it ran out of memory. */
            OOMKilled?: boolean;
            Dead?: boolean;
            /** The process ID of this container */
            Pid?: number;
            /** The last exit code of this container */
            ExitCode?: number;
            Error?: string;
            /** The time when this container was last started. */
            StartedAt?: string;
            /** The time when this container last exited. */
            FinishedAt?: string;
        };
        /** The container's image */
        Image?: string;
        ResolvConfPath?: string;
        HostnamePath?: string;
        HostsPath?: string;
        LogPath?: string;
        /** TODO */
        Node?: {};
        Name?: string;
        RestartCount?: number;
        Driver?: string;
        MountLabel?: string;
        ProcessLabel?: string;
        AppArmorProfile?: string;
        /** IDs of exec instances that are running in the container. */
        ExecIDs?: string[] | null;
        HostConfig?: Schemas.HostConfig;
        GraphDriver?: Schemas.GraphDriverData;
        /** The size of files that have been created or changed by this container. */
        SizeRw?: number;
        /** The total size of all the files in this container. */
        SizeRootFs?: number;
        Mounts?: Schemas.MountPoint[];
        Config?: Schemas.ContainerConfig;
        NetworkSettings?: Schemas.NetworkSettings;
    };
}
export interface Response$ContainerInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ContainerTop {
    /** ID or name of the container */
    id: string;
    /** The arguments to pass to `ps`. For example, `aux` */
    ps_args?: string;
}
export interface Response$ContainerTop$Status$200 {
    /** OK response to ContainerTop operation */
    "application/json": {
        /** The ps column titles */
        Titles?: string[];
        /** Each process running in the container, where each is process is an array of values corresponding to the titles */
        Processes?: string[][];
    };
    /** OK response to ContainerTop operation */
    "text/plain": {
        /** The ps column titles */
        Titles?: string[];
        /** Each process running in the container, where each is process is an array of values corresponding to the titles */
        Processes?: string[][];
    };
}
export interface Response$ContainerTop$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerTop$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerLogs {
    /** ID or name of the container */
    id: string;
    /**
     * Return the logs as a stream.
     *
     * This will return a `101` HTTP response with a `Connection: upgrade` header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
     */
    follow?: boolean;
    /** Return logs from `stdout` */
    stdout?: boolean;
    /** Return logs from `stderr` */
    stderr?: boolean;
    /** Only return logs since this time, as a UNIX timestamp */
    since?: number;
    /** Only return logs before this time, as a UNIX timestamp */
    until?: number;
    /** Add timestamps to every log line */
    timestamps?: boolean;
    /** Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines. */
    tail?: string;
}
export interface Response$ContainerLogs$Status$101 {
    "application/json": string;
    "text/plain": string;
}
export interface Response$ContainerLogs$Status$200 {
    "application/json": string;
    "text/plain": string;
}
export interface Response$ContainerLogs$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerLogs$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerChanges {
    /** ID or name of the container */
    id: string;
}
export interface Response$ContainerChanges$Status$200 {
    "application/json": {
        /** Path to file that has changed */
        Path: string;
        /** Kind of change */
        Kind: 0 | 1 | 2;
    }[];
}
export interface Response$ContainerChanges$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerChanges$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ContainerExport {
    /** ID or name of the container */
    id: string;
}
export interface Response$ContainerExport$Status$404 {
    "application/octet-stream": Schemas.ErrorResponse;
}
export interface Response$ContainerExport$Status$500 {
    "application/octet-stream": Schemas.ErrorResponse;
}
export interface Parameter$ContainerStats {
    /** ID or name of the container */
    id: string;
    /** Stream the output. If false, the stats will be output once and then it will disconnect. */
    stream?: boolean;
}
export interface Response$ContainerStats$Status$200 {
    "application/json": {};
}
export interface Response$ContainerStats$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerStats$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ContainerResize {
    /** ID or name of the container */
    id: string;
    /** Height of the tty session in characters */
    h?: number;
    /** Width of the tty session in characters */
    w?: number;
}
export interface Response$ContainerResize$Status$404 {
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerResize$Status$500 {
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerStart {
    /** ID or name of the container */
    id: string;
    /** Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. */
    detachKeys?: string;
}
export interface Response$ContainerStart$Status$304 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerStart$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerStart$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerStop {
    /** ID or name of the container */
    id: string;
    /** Number of seconds to wait before killing the container */
    t?: number;
}
export interface Response$ContainerStop$Status$304 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerStop$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerStop$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerRestart {
    /** ID or name of the container */
    id: string;
    /** Number of seconds to wait before killing the container */
    t?: number;
}
export interface Response$ContainerRestart$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerRestart$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerKill {
    /** ID or name of the container */
    id: string;
    /** Signal to send to the container as an integer or string (e.g. `SIGINT`) */
    signal?: string;
}
export interface Response$ContainerKill$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerKill$Status$409 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerKill$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerUpdate {
    /** ID or name of the container */
    id: string;
}
export interface RequestBody$ContainerUpdate {
    "application/json": Schemas.Resources & {
        RestartPolicy?: Schemas.RestartPolicy;
    };
}
export interface Response$ContainerUpdate$Status$200 {
    /** OK response to ContainerUpdate operation */
    "application/json": {
        Warnings?: string[];
    };
}
export interface Response$ContainerUpdate$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerUpdate$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ContainerRename {
    /** ID or name of the container */
    id: string;
    /** New name for the container */
    name: string;
}
export interface Response$ContainerRename$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerRename$Status$409 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerRename$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerPause {
    /** ID or name of the container */
    id: string;
}
export interface Response$ContainerPause$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerPause$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerUnpause {
    /** ID or name of the container */
    id: string;
}
export interface Response$ContainerUnpause$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerUnpause$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerAttach {
    /** ID or name of the container */
    id: string;
    /** Override the key sequence for detaching a container.Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. */
    detachKeys?: string;
    /**
     * Replay previous logs from the container.
     *
     * This is useful for attaching to a container that has started and you want to output everything since the container started.
     *
     * If `stream` is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.
     */
    logs?: boolean;
    /** Stream attached streams from the time the request was made onwards */
    stream?: boolean;
    /** Attach to `stdin` */
    stdin?: boolean;
    /** Attach to `stdout` */
    stdout?: boolean;
    /** Attach to `stderr` */
    stderr?: boolean;
}
export interface Response$ContainerAttach$Status$400 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
}
export interface Response$ContainerAttach$Status$404 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
}
export interface Response$ContainerAttach$Status$500 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
}
export interface Parameter$ContainerAttachWebsocket {
    /** ID or name of the container */
    id: string;
    /** Override the key sequence for detaching a container.Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,`, or `_`. */
    detachKeys?: string;
    /** Return logs */
    logs?: boolean;
    /** Return stream */
    stream?: boolean;
    /** Attach to `stdin` */
    stdin?: boolean;
    /** Attach to `stdout` */
    stdout?: boolean;
    /** Attach to `stderr` */
    stderr?: boolean;
}
export interface Response$ContainerAttachWebsocket$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerAttachWebsocket$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerAttachWebsocket$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerWait {
    /** ID or name of the container */
    id: string;
    /** Wait until a container state reaches the given condition, either 'not-running' (default), 'next-exit', or 'removed'. */
    condition?: string;
}
export interface Response$ContainerWait$Status$200 {
    /** OK response to ContainerWait operation */
    "application/json": {
        /** Exit code of the container */
        StatusCode: number;
        /** container waiting error, if any */
        Error?: {
            /** Details of an error */
            Message?: string;
        };
    };
}
export interface Response$ContainerWait$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerWait$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ContainerDelete {
    /** ID or name of the container */
    id: string;
    /** Remove anonymous volumes associated with the container. */
    v?: boolean;
    /** If the container is running, kill it before removing it. */
    force?: boolean;
    /** Remove the specified link associated with the container. */
    link?: boolean;
}
export interface Response$ContainerDelete$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerDelete$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerDelete$Status$409 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerDelete$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerArchive {
    /** ID or name of the container */
    id: string;
    /** Resource in the container’s filesystem to archive. */
    path: string;
}
export interface Response$ContainerArchive$Status$400 {
    "application/x-tar": Schemas.ErrorResponse & {
        /** The error message. Either "must specify path parameter" (path cannot be empty) or "not a directory" (path was asserted to be a directory but exists as a file). */
        message?: string;
    };
}
export interface Response$ContainerArchive$Status$404 {
    "application/x-tar": Schemas.ErrorResponse;
}
export interface Response$ContainerArchive$Status$500 {
    "application/x-tar": Schemas.ErrorResponse;
}
export interface Parameter$PutContainerArchive {
    /** ID or name of the container */
    id: string;
    /** Path to a directory in the container to extract the archive’s contents into.  */
    path: string;
    /** If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. */
    noOverwriteDirNonDir?: string;
}
export interface RequestBody$PutContainerArchive {
    "application/x-tar": string;
    "application/octet-stream": string;
}
export interface Response$PutContainerArchive$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$PutContainerArchive$Status$403 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$PutContainerArchive$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$PutContainerArchive$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerArchiveInfo {
    /** ID or name of the container */
    id: string;
    /** Resource in the container’s filesystem to archive. */
    path: string;
}
export interface Response$ContainerArchiveInfo$Status$400 {
    "application/json": Schemas.ErrorResponse & {
        /** The error message. Either "must specify path parameter" (path cannot be empty) or "not a directory" (path was asserted to be a directory but exists as a file). */
        message?: string;
    };
    "text/plain": Schemas.ErrorResponse & {
        /** The error message. Either "must specify path parameter" (path cannot be empty) or "not a directory" (path was asserted to be a directory but exists as a file). */
        message?: string;
    };
}
export interface Response$ContainerArchiveInfo$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ContainerArchiveInfo$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ContainerPrune {
    /**
     * Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
     *
     * Available filters:
     * - `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
     * - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.
     */
    filters?: string;
}
export interface Response$ContainerPrune$Status$200 {
    "application/json": {
        /** Container IDs that were deleted */
        ContainersDeleted?: string[];
        /** Disk space reclaimed in bytes */
        SpaceReclaimed?: number;
    };
}
export interface Response$ContainerPrune$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ImageList {
    /** Show all images. Only images from a final layer (no children) are shown by default. */
    all?: boolean;
    /**
     * A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
     *
     * - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
     * - `dangling=true`
     * - `label=key` or `label="key=value"` of an image label
     * - `reference`=(`<image-name>[:<tag>]`)
     * - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
     */
    filters?: string;
    /** Show digest information as a `RepoDigests` field on each image. */
    digests?: boolean;
}
export interface Response$ImageList$Status$200 {
    "application/json": Schemas.ImageSummary[];
}
export interface Response$ImageList$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ImageBuild {
    /** Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`. */
    dockerfile?: string;
    /** A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters. */
    t?: string;
    /** Extra hosts to add to /etc/hosts */
    extrahosts?: string;
    /** A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball. */
    remote?: string;
    /** Suppress verbose build output. */
    q?: boolean;
    /** Do not use the cache when building the image. */
    nocache?: boolean;
    /** JSON array of images used for build cache resolution. */
    cachefrom?: string;
    /** Attempt to pull the image even if an older image exists locally. */
    pull?: string;
    /** Remove intermediate containers after a successful build. */
    rm?: boolean;
    /** Always remove intermediate containers, even upon failure. */
    forcerm?: boolean;
    /** Set memory limit for build. */
    memory?: number;
    /** Total memory (memory + swap). Set as `-1` to disable swap. */
    memswap?: number;
    /** CPU shares (relative weight). */
    cpushares?: number;
    /** CPUs in which to allow execution (e.g., `0-3`, `0,1`). */
    cpusetcpus?: string;
    /** The length of a CPU period in microseconds. */
    cpuperiod?: number;
    /** Microseconds of CPU time that the container can get in a CPU period. */
    cpuquota?: number;
    /**
     * JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.
     *
     * For example, the build arg `FOO=bar` would become `{"FOO":"bar"}` in JSON. This would result in the query parameter `buildargs={"FOO":"bar"}`. Note that `{"FOO":"bar"}` should be URI component encoded.
     *
     * [Read more about the buildargs instruction.](/engine/reference/builder/#arg)
     */
    buildargs?: string;
    /** Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB. */
    shmsize?: number;
    /** Squash the resulting images layers into a single layer. *(Experimental release only.)* */
    squash?: boolean;
    /** Arbitrary key/value labels to set on the image, as a JSON map of string pairs. */
    labels?: string;
    /** Sets the networking mode for the run commands during build. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to. */
    networkmode?: string;
    "Content-type"?: "application/x-tar";
    /**
     * This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.
     *
     * The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:
     *
     * ```
     * {
     *   "docker.example.com": {
     *     "username": "janedoe",
     *     "password": "hunter2"
     *   },
     *   "https://index.docker.io/v1/": {
     *     "username": "mobydock",
     *     "password": "conta1n3rize14"
     *   }
     * }
     * ```
     *
     * Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.
     */
    "X-Registry-Config"?: string;
    /** Platform in the format os[/arch[/variant]] */
    platform?: string;
    /** Target build stage */
    target?: string;
}
export interface RequestBody$ImageBuild {
    "application/octet-stream": string;
}
export interface Response$ImageBuild$Status$400 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ImageBuild$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$BuildPrune$Status$200 {
    "application/json": {
        /** Disk space reclaimed in bytes */
        SpaceReclaimed?: number;
    };
}
export interface Response$BuildPrune$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ImageCreate {
    /** Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. */
    fromImage?: string;
    /** Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image. */
    fromSrc?: string;
    /** Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. */
    repo?: string;
    /** Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. */
    tag?: string;
    /** A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication) */
    "X-Registry-Auth"?: string;
    /** Platform in the format os[/arch[/variant]] */
    platform?: string;
}
export interface RequestBody$ImageCreate {
    "text/plain": string;
    "application/octet-stream": string;
}
export interface Response$ImageCreate$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ImageCreate$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ImageInspect {
    /** Image name or id */
    name: string;
}
export interface Response$ImageInspect$Status$200 {
    "application/json": Schemas.Image;
}
export interface Response$ImageInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ImageInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ImageHistory {
    /** Image name or ID */
    name: string;
}
export interface Response$ImageHistory$Status$200 {
    "application/json": {
        Id: string;
        Created: number;
        CreatedBy: string;
        Tags: string[];
        Size: number;
        Comment: string;
    }[];
}
export interface Response$ImageHistory$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ImageHistory$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ImagePush {
    /** Image name or ID. */
    name: string;
    /** The tag to associate with the image on the registry. */
    tag?: string;
    /** A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication) */
    "X-Registry-Auth": string;
}
export interface Response$ImagePush$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ImagePush$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ImageTag {
    /** Image name or ID to tag. */
    name: string;
    /** The repository to tag in. For example, `someuser/someimage`. */
    repo?: string;
    /** The name of the new tag. */
    tag?: string;
}
export interface Response$ImageTag$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ImageTag$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ImageTag$Status$409 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ImageTag$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ImageDelete {
    /** Image name or ID */
    name: string;
    /** Remove the image even if it is being used by stopped containers or has other tags */
    force?: boolean;
    /** Do not delete untagged parent images */
    noprune?: boolean;
}
export interface Response$ImageDelete$Status$200 {
    "application/json": Schemas.ImageDeleteResponseItem[];
}
export interface Response$ImageDelete$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ImageDelete$Status$409 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ImageDelete$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ImageSearch {
    /** Term to search */
    term: string;
    /** Maximum number of results to return */
    limit?: number;
    /**
     * A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
     *
     * - `is-automated=(true|false)`
     * - `is-official=(true|false)`
     * - `stars=<number>` Matches images that has at least 'number' stars.
     */
    filters?: string;
}
export interface Response$ImageSearch$Status$200 {
    "application/json": {
        description?: string;
        is_official?: boolean;
        is_automated?: boolean;
        name?: string;
        star_count?: number;
    }[];
}
export interface Response$ImageSearch$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ImagePrune {
    /**
     * Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:
     *
     * - `dangling=<boolean>` When set to `true` (or `1`), prune only
     *    unused *and* untagged images. When set to `false`
     *    (or `0`), all unused images are pruned.
     * - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
     * - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.
     */
    filters?: string;
}
export interface Response$ImagePrune$Status$200 {
    "application/json": {
        /** Images that were deleted */
        ImagesDeleted?: Schemas.ImageDeleteResponseItem[];
        /** Disk space reclaimed in bytes */
        SpaceReclaimed?: number;
    };
}
export interface Response$ImagePrune$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface RequestBody$SystemAuth {
    "application/json": Schemas.AuthConfig;
}
export interface Response$SystemAuth$Status$200 {
    "application/json": {
        /** The status of the authentication */
        Status: string;
        /** An opaque token used to authenticate a user after a successful login */
        IdentityToken?: string;
    };
}
export interface Response$SystemAuth$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SystemInfo$Status$200 {
    "application/json": Schemas.SystemInfo;
}
export interface Response$SystemInfo$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SystemVersion$Status$200 {
    "application/json": {
        Platform?: {
            Name: string;
        };
        Components?: {
            Name: string;
            Version: string;
            Details?: {} | null;
        }[];
        Version?: string;
        ApiVersion?: string;
        MinAPIVersion?: string;
        GitCommit?: string;
        GoVersion?: string;
        Os?: string;
        Arch?: string;
        KernelVersion?: string;
        Experimental?: boolean;
        BuildTime?: string;
    };
}
export interface Response$SystemVersion$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SystemPing$Status$200 {
    "text/plain": string;
}
export interface Response$SystemPing$Status$500 {
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ImageCommit {
    /** The ID or name of the container to commit */
    container?: string;
    /** Repository name for the created image */
    repo?: string;
    /** Tag name for the create image */
    tag?: string;
    /** Commit message */
    comment?: string;
    /** Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`) */
    author?: string;
    /** Whether to pause the container before committing */
    pause?: boolean;
    /** `Dockerfile` instructions to apply while committing */
    changes?: string;
}
export interface RequestBody$ImageCommit {
    "application/json": Schemas.ContainerConfig;
}
export interface Response$ImageCommit$Status$201 {
    "application/json": Schemas.IdResponse;
}
export interface Response$ImageCommit$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ImageCommit$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$SystemEvents {
    /** Show events created since this timestamp then stream new events. */
    since?: string;
    /** Show events created until this timestamp then stop streaming. */
    until?: string;
    /**
     * A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:
     *
     * - `config=<string>` config name or ID
     * - `container=<string>` container name or ID
     * - `daemon=<string>` daemon name or ID
     * - `event=<string>` event type
     * - `image=<string>` image name or ID
     * - `label=<string>` image or container label
     * - `network=<string>` network name or ID
     * - `node=<string>` node ID
     * - `plugin`=<string> plugin name or ID
     * - `scope`=<string> local or swarm
     * - `secret=<string>` secret name or ID
     * - `service=<string>` service name or ID
     * - `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`
     * - `volume=<string>` volume name
     */
    filters?: string;
}
export interface Response$SystemEvents$Status$200 {
    "application/json": {
        /** The type of object emitting the event */
        Type?: string;
        /** The type of event */
        Action?: string;
        Actor?: {
            /** The ID of the object emitting the event */
            ID?: string;
            /** Various key/value attributes of the object, depending on its type */
            Attributes?: {
                [key: string]: string;
            };
        };
        /** Timestamp of event */
        time?: number;
        /** Timestamp of event, with nanosecond accuracy */
        timeNano?: number;
    };
}
export interface Response$SystemEvents$Status$400 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SystemEvents$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SystemDataUsage$Status$200 {
    "application/json": {
        LayersSize?: number;
        Images?: Schemas.ImageSummary[];
        Containers?: Schemas.ContainerSummary[];
        Volumes?: Schemas.Volume[];
    };
    "text/plain": {
        LayersSize?: number;
        Images?: Schemas.ImageSummary[];
        Containers?: Schemas.ContainerSummary[];
        Volumes?: Schemas.Volume[];
    };
}
export interface Response$SystemDataUsage$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ImageGet {
    /** Image name or ID */
    name: string;
}
export interface Response$ImageGet$Status$200 {
    "application/x-tar": string;
}
export interface Response$ImageGet$Status$500 {
    "application/x-tar": Schemas.ErrorResponse;
}
export interface Parameter$ImageGetAll {
    /** Image names to filter by */
    names?: string[];
}
export interface Response$ImageGetAll$Status$200 {
    "application/x-tar": string;
}
export interface Response$ImageGetAll$Status$500 {
    "application/x-tar": Schemas.ErrorResponse;
}
export interface Parameter$ImageLoad {
    /** Suppress progress details during load. */
    quiet?: boolean;
}
export interface RequestBody$ImageLoad {
    "application/x-tar": string;
}
export interface Response$ImageLoad$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ContainerExec {
    /** ID or name of container */
    id: string;
}
export interface RequestBody$ContainerExec {
    "application/json": {
        /** Attach to `stdin` of the exec command. */
        AttachStdin?: boolean;
        /** Attach to `stdout` of the exec command. */
        AttachStdout?: boolean;
        /** Attach to `stderr` of the exec command. */
        AttachStderr?: boolean;
        /** Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. */
        DetachKeys?: string;
        /** Allocate a pseudo-TTY. */
        Tty?: boolean;
        /** A list of environment variables in the form `["VAR=value", ...]`. */
        Env?: string[];
        /** Command to run, as a string or array of strings. */
        Cmd?: string[];
        /** Runs the exec process with extended privileges. */
        Privileged?: boolean;
        /** The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`. */
        User?: string;
        /** The working directory for the exec process inside the container. */
        WorkingDir?: string;
    };
}
export interface Response$ContainerExec$Status$201 {
    "application/json": Schemas.IdResponse;
}
export interface Response$ContainerExec$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerExec$Status$409 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ContainerExec$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ExecStart {
    /** Exec instance ID */
    id: string;
}
export interface RequestBody$ExecStart {
    "application/json": {
        /** Detach from the command. */
        Detach?: boolean;
        /** Allocate a pseudo-TTY. */
        Tty?: boolean;
    };
}
export interface Response$ExecStart$Status$404 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
}
export interface Response$ExecStart$Status$409 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
}
export interface Parameter$ExecResize {
    /** Exec instance ID */
    id: string;
    /** Height of the TTY session in characters */
    h?: number;
    /** Width of the TTY session in characters */
    w?: number;
}
export interface Response$ExecResize$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ExecResize$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ExecResize$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ExecInspect {
    /** Exec instance ID */
    id: string;
}
export interface Response$ExecInspect$Status$200 {
    "application/json": {
        CanRemove?: boolean;
        DetachKeys?: string;
        ID?: string;
        Running?: boolean;
        ExitCode?: number;
        ProcessConfig?: Schemas.ProcessConfig;
        OpenStdin?: boolean;
        OpenStderr?: boolean;
        OpenStdout?: boolean;
        ContainerID?: string;
        /** The system process ID for the exec process. */
        Pid?: number;
    };
}
export interface Response$ExecInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ExecInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$VolumeList {
    /**
     * JSON encoded value of the filters (a `map[string][]string`) to
     * process on the volumes list. Available filters:
     *
     * - `dangling=<boolean>` When set to `true` (or `1`), returns all
     *    volumes that are not in use by a container. When set to `false`
     *    (or `0`), only volumes that are in use by one or more
     *    containers are returned.
     * - `driver=<volume-driver-name>` Matches volumes based on their driver.
     * - `label=<key>` or `label=<key>:<value>` Matches volumes based on
     *    the presence of a `label` alone or a `label` and a value.
     * - `name=<volume-name>` Matches all or part of a volume name.
     */
    filters?: string;
}
export interface Response$VolumeList$Status$200 {
    "application/json": {
        /** List of volumes */
        Volumes: Schemas.Volume[];
        /** Warnings that occurred when fetching the list of volumes */
        Warnings: string[];
    };
}
export interface Response$VolumeList$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface RequestBody$VolumeCreate {
    "application/json": {
        /** The new volume's name. If not specified, Docker generates a name. */
        Name?: string;
        /** Name of the volume driver to use. */
        Driver?: string;
        /** A mapping of driver options and values. These options are passed directly to the driver and are driver specific. */
        DriverOpts?: {
            [key: string]: string;
        };
        /** User-defined key/value metadata. */
        Labels?: {
            [key: string]: string;
        };
    };
}
export interface Response$VolumeCreate$Status$201 {
    "application/json": Schemas.Volume;
}
export interface Response$VolumeCreate$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$VolumeInspect {
    /** Volume name or ID */
    name: string;
}
export interface Response$VolumeInspect$Status$200 {
    "application/json": Schemas.Volume;
}
export interface Response$VolumeInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$VolumeInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$VolumeDelete {
    /** Volume name or ID */
    name: string;
    /** Force the removal of the volume */
    force?: boolean;
}
export interface Response$VolumeDelete$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$VolumeDelete$Status$409 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$VolumeDelete$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$VolumePrune {
    /**
     * Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
     *
     * Available filters:
     * - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.
     */
    filters?: string;
}
export interface Response$VolumePrune$Status$200 {
    "application/json": {
        /** Volumes that were deleted */
        VolumesDeleted?: string[];
        /** Disk space reclaimed in bytes */
        SpaceReclaimed?: number;
    };
}
export interface Response$VolumePrune$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$NetworkList {
    /**
     * JSON encoded value of the filters (a `map[string][]string`) to process on the networks list. Available filters:
     *
     * - `driver=<driver-name>` Matches a network's driver.
     * - `id=<network-id>` Matches all or part of a network ID.
     * - `label=<key>` or `label=<key>=<value>` of a network label.
     * - `name=<network-name>` Matches all or part of a network name.
     * - `scope=["swarm"|"global"|"local"]` Filters networks by scope (`swarm`, `global`, or `local`).
     * - `type=["custom"|"builtin"]` Filters networks by type. The `custom` keyword returns all user-defined networks.
     */
    filters?: string;
}
export interface Response$NetworkList$Status$200 {
    "application/json": Schemas.Network[];
}
export interface Response$NetworkList$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$NetworkInspect {
    /** Network ID or name */
    id: string;
    /** Detailed inspect output for troubleshooting */
    verbose?: boolean;
    /** Filter the network by scope (swarm, global, or local) */
    scope?: string;
}
export interface Response$NetworkInspect$Status$200 {
    "application/json": Schemas.Network;
}
export interface Response$NetworkInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$NetworkInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$NetworkDelete {
    /** Network ID or name */
    id: string;
}
export interface Response$NetworkDelete$Status$403 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NetworkDelete$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NetworkDelete$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface RequestBody$NetworkCreate {
    "application/json": {
        /** The network's name. */
        Name: string;
        /** Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions. */
        CheckDuplicate?: boolean;
        /** Name of the network driver plugin to use. */
        Driver?: string;
        /** Restrict external access to the network. */
        Internal?: boolean;
        /** Globally scoped network is manually attachable by regular containers from workers in swarm mode. */
        Attachable?: boolean;
        /** Ingress network is the network which provides the routing-mesh in swarm mode. */
        Ingress?: boolean;
        IPAM?: Schemas.IPAM;
        /** Enable IPv6 on the network. */
        EnableIPv6?: boolean;
        /** Network specific options to be used by the drivers. */
        Options?: {
            [key: string]: string;
        };
        /** User-defined key/value metadata. */
        Labels?: {
            [key: string]: string;
        };
    };
}
export interface Response$NetworkCreate$Status$201 {
    "application/json": {
        /** The ID of the created network. */
        Id?: string;
        Warning?: string;
    };
}
export interface Response$NetworkCreate$Status$403 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$NetworkCreate$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$NetworkCreate$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$NetworkConnect {
    /** Network ID or name */
    id: string;
}
export interface RequestBody$NetworkConnect {
    "application/json": {
        /** The ID or name of the container to connect to the network. */
        Container?: string;
        EndpointConfig?: Schemas.EndpointSettings;
    };
}
export interface Response$NetworkConnect$Status$403 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NetworkConnect$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NetworkConnect$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$NetworkDisconnect {
    /** Network ID or name */
    id: string;
}
export interface RequestBody$NetworkDisconnect {
    "application/json": {
        /** The ID or name of the container to disconnect from the network. */
        Container?: string;
        /** Force the container to disconnect from the network. */
        Force?: boolean;
    };
}
export interface Response$NetworkDisconnect$Status$403 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NetworkDisconnect$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NetworkDisconnect$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$NetworkPrune {
    /**
     * Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
     *
     * Available filters:
     * - `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
     * - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.
     */
    filters?: string;
}
export interface Response$NetworkPrune$Status$200 {
    "application/json": {
        /** Networks that were deleted */
        NetworksDeleted?: string[];
    };
}
export interface Response$NetworkPrune$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$PluginList {
    /**
     * A JSON encoded value of the filters (a `map[string][]string`) to process on the plugin list. Available filters:
     *
     * - `capability=<capability name>`
     * - `enable=<true>|<false>`
     */
    filters?: string;
}
export interface Response$PluginList$Status$200 {
    "application/json": Schemas.Plugin[];
}
export interface Response$PluginList$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$GetPluginPrivileges {
    /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
    remote: string;
}
export interface Response$GetPluginPrivileges$Status$200 {
    "application/json": {
        Name?: string;
        Description?: string;
        Value?: string[];
    }[];
    "text/plain": {
        Name?: string;
        Description?: string;
        Value?: string[];
    }[];
}
export interface Response$GetPluginPrivileges$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$PluginPull {
    /**
     * Remote reference for plugin to install.
     *
     * The `:latest` tag is optional, and is used as the default if omitted.
     */
    remote: string;
    /**
     * Local name for the pulled plugin.
     *
     * The `:latest` tag is optional, and is used as the default if omitted.
     */
    name?: string;
    /** A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication) */
    "X-Registry-Auth"?: string;
}
export type RequestBody$PluginPull = RequestBodies.PluginPullBody.Content;
export interface Response$PluginPull$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$PluginInspect {
    /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
    name: string;
}
export interface Response$PluginInspect$Status$200 {
    "application/json": Schemas.Plugin;
    "text/plain": Schemas.Plugin;
}
export interface Response$PluginInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$PluginInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$PluginDelete {
    /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
    name: string;
    /** Disable the plugin before removing. This may result in issues if the plugin is in use by a container. */
    force?: boolean;
}
export interface Response$PluginDelete$Status$200 {
    "application/json": Schemas.Plugin;
    "text/plain": Schemas.Plugin;
}
export interface Response$PluginDelete$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$PluginDelete$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$PluginEnable {
    /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
    name: string;
    /** Set the HTTP client timeout (in seconds) */
    timeout?: number;
}
export interface Response$PluginEnable$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$PluginEnable$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$PluginDisable {
    /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
    name: string;
}
export interface Response$PluginDisable$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$PluginDisable$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$PluginUpgrade {
    /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
    name: string;
    /**
     * Remote reference to upgrade to.
     *
     * The `:latest` tag is optional, and is used as the default if omitted.
     */
    remote: string;
    /** A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication) */
    "X-Registry-Auth"?: string;
}
export type RequestBody$PluginUpgrade = RequestBodies.PluginPullBody.Content;
export interface Response$PluginUpgrade$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$PluginUpgrade$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$PluginCreate {
    /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
    name: string;
}
export interface RequestBody$PluginCreate {
    "application/x-tar": string;
}
export interface Response$PluginCreate$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$PluginPush {
    /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
    name: string;
}
export interface Response$PluginPush$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$PluginPush$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$PluginSet {
    /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
    name: string;
}
export interface RequestBody$PluginSet {
    "application/json": string[];
}
export interface Response$PluginSet$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$PluginSet$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$NodeList {
    /**
     * Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).
     *
     * Available filters:
     * - `id=<node id>`
     * - `label=<engine label>`
     * - `membership=`(`accepted`|`pending`)`
     * - `name=<node name>`
     * - `role=`(`manager`|`worker`)`
     */
    filters?: string;
}
export interface Response$NodeList$Status$200 {
    "application/json": Schemas.Node[];
    "text/plain": Schemas.Node[];
}
export interface Response$NodeList$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NodeList$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$NodeInspect {
    /** The ID or name of the node */
    id: string;
}
export interface Response$NodeInspect$Status$200 {
    "application/json": Schemas.Node;
    "text/plain": Schemas.Node;
}
export interface Response$NodeInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NodeInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NodeInspect$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$NodeDelete {
    /** The ID or name of the node */
    id: string;
    /** Force remove a node from the swarm */
    force?: boolean;
}
export interface Response$NodeDelete$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NodeDelete$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NodeDelete$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$NodeUpdate {
    /** The ID of the node */
    id: string;
    /** The version number of the node object being updated. This is required to avoid conflicting writes. */
    version: number;
}
export interface RequestBody$NodeUpdate {
    "application/json": Schemas.NodeSpec;
    "text/plain": Schemas.NodeSpec;
}
export interface Response$NodeUpdate$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NodeUpdate$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NodeUpdate$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$NodeUpdate$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmInspect$Status$200 {
    "application/json": Schemas.Swarm;
    "text/plain": Schemas.Swarm;
}
export interface Response$SwarmInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmInspect$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface RequestBody$SwarmInit {
    "application/json": {
        /** Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used. */
        ListenAddr?: string;
        /** Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. */
        AdvertiseAddr?: string;
        /**
         * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`,
         * or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`
         * is used.
         *
         * The `DataPathAddr` specifies the address that global scope network drivers will publish towards other
         * nodes in order to reach the containers running on this node. Using this parameter it is possible to
         * separate the container data traffic from the management traffic of the cluster.
         */
        DataPathAddr?: string;
        /** Force creation of a new swarm. */
        ForceNewCluster?: boolean;
        Spec?: Schemas.SwarmSpec;
    };
    "text/plain": {
        /** Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used. */
        ListenAddr?: string;
        /** Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. */
        AdvertiseAddr?: string;
        /**
         * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`,
         * or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`
         * is used.
         *
         * The `DataPathAddr` specifies the address that global scope network drivers will publish towards other
         * nodes in order to reach the containers running on this node. Using this parameter it is possible to
         * separate the container data traffic from the management traffic of the cluster.
         */
        DataPathAddr?: string;
        /** Force creation of a new swarm. */
        ForceNewCluster?: boolean;
        Spec?: Schemas.SwarmSpec;
    };
}
export interface Response$SwarmInit$Status$200 {
    /** The node ID */
    "application/json": string;
    /** The node ID */
    "text/plain": string;
}
export interface Response$SwarmInit$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmInit$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmInit$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface RequestBody$SwarmJoin {
    "application/json": {
        /** Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). */
        ListenAddr?: string;
        /** Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. */
        AdvertiseAddr?: string;
        /**
         * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`,
         * or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`
         * is used.
         *
         * The `DataPathAddr` specifies the address that global scope network drivers will publish towards other
         * nodes in order to reach the containers running on this node. Using this parameter it is possible to
         * separate the container data traffic from the management traffic of the cluster.
         */
        DataPathAddr?: string;
        /** Addresses of manager nodes already participating in the swarm. */
        RemoteAddrs?: string;
        /** Secret token for joining this swarm. */
        JoinToken?: string;
    };
    "text/plain": {
        /** Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). */
        ListenAddr?: string;
        /** Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. */
        AdvertiseAddr?: string;
        /**
         * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`,
         * or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`
         * is used.
         *
         * The `DataPathAddr` specifies the address that global scope network drivers will publish towards other
         * nodes in order to reach the containers running on this node. Using this parameter it is possible to
         * separate the container data traffic from the management traffic of the cluster.
         */
        DataPathAddr?: string;
        /** Addresses of manager nodes already participating in the swarm. */
        RemoteAddrs?: string;
        /** Secret token for joining this swarm. */
        JoinToken?: string;
    };
}
export interface Response$SwarmJoin$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmJoin$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmJoin$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$SwarmLeave {
    /** Force leave swarm, even if this is the last manager or that it will break the cluster. */
    force?: boolean;
}
export interface Response$SwarmLeave$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmLeave$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$SwarmUpdate {
    /** The version number of the swarm object being updated. This is required to avoid conflicting writes. */
    version: number;
    /** Rotate the worker join token. */
    rotateWorkerToken?: boolean;
    /** Rotate the manager join token. */
    rotateManagerToken?: boolean;
    /** Rotate the manager unlock key. */
    rotateManagerUnlockKey?: boolean;
}
export interface RequestBody$SwarmUpdate {
    "application/json": Schemas.SwarmSpec;
    "text/plain": Schemas.SwarmSpec;
}
export interface Response$SwarmUpdate$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmUpdate$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmUpdate$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmUnlockkey$Status$200 {
    "application/json": {
        /** The swarm's unlock key. */
        UnlockKey?: string;
    };
    "text/plain": {
        /** The swarm's unlock key. */
        UnlockKey?: string;
    };
}
export interface Response$SwarmUnlockkey$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SwarmUnlockkey$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface RequestBody$SwarmUnlock {
    "application/json": {
        /** The swarm's unlock key. */
        UnlockKey?: string;
    };
}
export interface Response$SwarmUnlock$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SwarmUnlock$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ServiceList {
    /**
     * A JSON encoded value of the filters (a `map[string][]string`) to process on the services list. Available filters:
     *
     * - `id=<service id>`
     * - `label=<service label>`
     * - `mode=["replicated"|"global"]`
     * - `name=<service name>`
     */
    filters?: string;
}
export interface Response$ServiceList$Status$200 {
    "application/json": Schemas.Service[];
    "text/plain": Schemas.Service[];
}
export interface Response$ServiceList$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ServiceList$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ServiceCreate {
    /** A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication) */
    "X-Registry-Auth"?: string;
}
export interface RequestBody$ServiceCreate {
    "application/json": Schemas.ServiceSpec & {};
}
export interface Response$ServiceCreate$Status$201 {
    "application/json": {
        /** The ID of the created service. */
        ID?: string;
        /** Optional warning message */
        Warning?: string;
    };
}
export interface Response$ServiceCreate$Status$400 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ServiceCreate$Status$403 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ServiceCreate$Status$409 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ServiceCreate$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ServiceCreate$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ServiceInspect {
    /** ID or name of service. */
    id: string;
    /** Fill empty fields with default values. */
    insertDefaults?: boolean;
}
export interface Response$ServiceInspect$Status$200 {
    "application/json": Schemas.Service;
    "text/plain": Schemas.Service;
}
export interface Response$ServiceInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ServiceInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ServiceInspect$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ServiceDelete {
    /** ID or name of service. */
    id: string;
}
export interface Response$ServiceDelete$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ServiceDelete$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ServiceDelete$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ServiceUpdate {
    /** ID or name of service. */
    id: string;
    /** The version number of the service object being updated. This is required to avoid conflicting writes. */
    version: number;
    /** If the X-Registry-Auth header is not specified, this parameter indicates where to find registry authorization credentials. The valid values are `spec` and `previous-spec`. */
    registryAuthFrom?: string;
    /** Set to this parameter to `previous` to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. */
    rollback?: string;
    /** A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication) */
    "X-Registry-Auth"?: string;
}
export interface RequestBody$ServiceUpdate {
    "application/json": Schemas.ServiceSpec & {};
}
export interface Response$ServiceUpdate$Status$200 {
    "application/json": Schemas.ServiceUpdateResponse;
}
export interface Response$ServiceUpdate$Status$400 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ServiceUpdate$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ServiceUpdate$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ServiceUpdate$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ServiceLogs {
    /** ID or name of the service */
    id: string;
    /** Show service context and extra details provided to logs. */
    details?: boolean;
    /**
     * Return the logs as a stream.
     *
     * This will return a `101` HTTP response with a `Connection: upgrade` header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
     */
    follow?: boolean;
    /** Return logs from `stdout` */
    stdout?: boolean;
    /** Return logs from `stderr` */
    stderr?: boolean;
    /** Only return logs since this time, as a UNIX timestamp */
    since?: number;
    /** Add timestamps to every log line */
    timestamps?: boolean;
    /** Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines. */
    tail?: string;
}
export interface Response$ServiceLogs$Status$101 {
    "application/vnd.docker.raw-stream": string;
    "application/json": string;
}
export interface Response$ServiceLogs$Status$200 {
    "application/vnd.docker.raw-stream": string;
    "application/json": string;
}
export interface Response$ServiceLogs$Status$404 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ServiceLogs$Status$500 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ServiceLogs$Status$503 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$TaskList {
    /**
     * A JSON encoded value of the filters (a `map[string][]string`) to process on the tasks list. Available filters:
     *
     * - `desired-state=(running | shutdown | accepted)`
     * - `id=<task id>`
     * - `label=key` or `label="key=value"`
     * - `name=<task name>`
     * - `node=<node id or name>`
     * - `service=<service name>`
     */
    filters?: string;
}
export interface Response$TaskList$Status$200 {
    "application/json": Schemas.Task[];
}
export interface Response$TaskList$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$TaskList$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$TaskInspect {
    /** ID of the task */
    id: string;
}
export interface Response$TaskInspect$Status$200 {
    "application/json": Schemas.Task;
}
export interface Response$TaskInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$TaskInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$TaskInspect$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$TaskLogs {
    /** ID of the task */
    id: string;
    /** Show task context and extra details provided to logs. */
    details?: boolean;
    /**
     * Return the logs as a stream.
     *
     * This will return a `101` HTTP response with a `Connection: upgrade` header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
     */
    follow?: boolean;
    /** Return logs from `stdout` */
    stdout?: boolean;
    /** Return logs from `stderr` */
    stderr?: boolean;
    /** Only return logs since this time, as a UNIX timestamp */
    since?: number;
    /** Add timestamps to every log line */
    timestamps?: boolean;
    /** Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines. */
    tail?: string;
}
export interface Response$TaskLogs$Status$101 {
    "application/vnd.docker.raw-stream": string;
    "application/json": string;
}
export interface Response$TaskLogs$Status$200 {
    "application/vnd.docker.raw-stream": string;
    "application/json": string;
}
export interface Response$TaskLogs$Status$404 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
    "application/json": Schemas.ErrorResponse;
}
export interface Response$TaskLogs$Status$500 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
    "application/json": Schemas.ErrorResponse;
}
export interface Response$TaskLogs$Status$503 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$SecretList {
    /**
     * A JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list. Available filters:
     *
     * - `id=<secret id>`
     * - `label=<key> or label=<key>=value`
     * - `name=<secret name>`
     * - `names=<secret name>`
     */
    filters?: string;
}
export interface Response$SecretList$Status$200 {
    "application/json": Schemas.Secret[];
}
export interface Response$SecretList$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SecretList$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface RequestBody$SecretCreate {
    "application/json": Schemas.SecretSpec & {};
}
export interface Response$SecretCreate$Status$201 {
    "application/json": Schemas.IdResponse;
}
export interface Response$SecretCreate$Status$409 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SecretCreate$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SecretCreate$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$SecretInspect {
    /** ID of the secret */
    id: string;
}
export interface Response$SecretInspect$Status$200 {
    "application/json": Schemas.Secret;
}
export interface Response$SecretInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SecretInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SecretInspect$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$SecretDelete {
    /** ID of the secret */
    id: string;
}
export interface Response$SecretDelete$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SecretDelete$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$SecretDelete$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$SecretUpdate {
    /** The ID or name of the secret */
    id: string;
    /** The version number of the secret object being updated. This is required to avoid conflicting writes. */
    version: number;
}
export interface RequestBody$SecretUpdate {
    "application/json": Schemas.SecretSpec;
    "text/plain": Schemas.SecretSpec;
}
export interface Response$SecretUpdate$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SecretUpdate$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SecretUpdate$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$SecretUpdate$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$ConfigList {
    /**
     * A JSON encoded value of the filters (a `map[string][]string`) to process on the configs list. Available filters:
     *
     * - `id=<config id>`
     * - `label=<key> or label=<key>=value`
     * - `name=<config name>`
     * - `names=<config name>`
     */
    filters?: string;
}
export interface Response$ConfigList$Status$200 {
    "application/json": Schemas.Config[];
}
export interface Response$ConfigList$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ConfigList$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface RequestBody$ConfigCreate {
    "application/json": Schemas.ConfigSpec & {};
}
export interface Response$ConfigCreate$Status$201 {
    "application/json": Schemas.IdResponse;
}
export interface Response$ConfigCreate$Status$409 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ConfigCreate$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ConfigCreate$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ConfigInspect {
    /** ID of the config */
    id: string;
}
export interface Response$ConfigInspect$Status$200 {
    "application/json": Schemas.Config;
}
export interface Response$ConfigInspect$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ConfigInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ConfigInspect$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ConfigDelete {
    /** ID of the config */
    id: string;
}
export interface Response$ConfigDelete$Status$404 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ConfigDelete$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$ConfigDelete$Status$503 {
    "application/json": Schemas.ErrorResponse;
}
export interface Parameter$ConfigUpdate {
    /** The ID or name of the config */
    id: string;
    /** The version number of the config object being updated. This is required to avoid conflicting writes. */
    version: number;
}
export interface RequestBody$ConfigUpdate {
    "application/json": Schemas.ConfigSpec;
    "text/plain": Schemas.ConfigSpec;
}
export interface Response$ConfigUpdate$Status$400 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ConfigUpdate$Status$404 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ConfigUpdate$Status$500 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Response$ConfigUpdate$Status$503 {
    "application/json": Schemas.ErrorResponse;
    "text/plain": Schemas.ErrorResponse;
}
export interface Parameter$DistributionInspect {
    /** Image name or id */
    name: string;
}
export interface Response$DistributionInspect$Status$200 {
    "application/json": {
        /** A descriptor struct containing digest, media type, and size */
        Descriptor: {
            MediaType?: string;
            Size?: number;
            Digest?: string;
            URLs?: string[];
        };
        /** An array containing all platforms supported by the image */
        Platforms: {
            Architecture?: string;
            OS?: string;
            OSVersion?: string;
            OSFeatures?: string[];
            Variant?: string;
            Features?: string[];
        }[];
    };
}
export interface Response$DistributionInspect$Status$401 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$DistributionInspect$Status$500 {
    "application/json": Schemas.ErrorResponse;
}
export interface Response$Session$Status$400 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
}
export interface Response$Session$Status$500 {
    "application/vnd.docker.raw-stream": Schemas.ErrorResponse;
}
export type ResponseContentType$ContainerList = keyof Response$ContainerList$Status$200;
export interface Params$ContainerList {
    parameter: Parameter$ContainerList;
}
export type RequestContentType$ContainerCreate = keyof RequestBody$ContainerCreate;
export type ResponseContentType$ContainerCreate = keyof Response$ContainerCreate$Status$201;
export interface Params$ContainerCreate<T extends RequestContentType$ContainerCreate> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$ContainerCreate;
    requestBody: RequestBody$ContainerCreate[T];
}
export type ResponseContentType$ContainerInspect = keyof Response$ContainerInspect$Status$200;
export interface Params$ContainerInspect {
    parameter: Parameter$ContainerInspect;
}
export type ResponseContentType$ContainerTop = keyof Response$ContainerTop$Status$200;
export interface Params$ContainerTop<U extends ResponseContentType$ContainerTop> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$ContainerTop;
}
export type ResponseContentType$ContainerLogs = keyof Response$ContainerLogs$Status$200;
export interface Params$ContainerLogs<U extends ResponseContentType$ContainerLogs> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$ContainerLogs;
}
export type ResponseContentType$ContainerChanges = keyof Response$ContainerChanges$Status$200;
export interface Params$ContainerChanges {
    parameter: Parameter$ContainerChanges;
}
export interface Params$ContainerExport {
    parameter: Parameter$ContainerExport;
}
export type ResponseContentType$ContainerStats = keyof Response$ContainerStats$Status$200;
export interface Params$ContainerStats {
    parameter: Parameter$ContainerStats;
}
export interface Params$ContainerResize {
    parameter: Parameter$ContainerResize;
}
export interface Params$ContainerStart {
    parameter: Parameter$ContainerStart;
}
export interface Params$ContainerStop {
    parameter: Parameter$ContainerStop;
}
export interface Params$ContainerRestart {
    parameter: Parameter$ContainerRestart;
}
export interface Params$ContainerKill {
    parameter: Parameter$ContainerKill;
}
export type RequestContentType$ContainerUpdate = keyof RequestBody$ContainerUpdate;
export type ResponseContentType$ContainerUpdate = keyof Response$ContainerUpdate$Status$200;
export interface Params$ContainerUpdate {
    parameter: Parameter$ContainerUpdate;
    requestBody: RequestBody$ContainerUpdate["application/json"];
}
export interface Params$ContainerRename {
    parameter: Parameter$ContainerRename;
}
export interface Params$ContainerPause {
    parameter: Parameter$ContainerPause;
}
export interface Params$ContainerUnpause {
    parameter: Parameter$ContainerUnpause;
}
export interface Params$ContainerAttach {
    parameter: Parameter$ContainerAttach;
}
export interface Params$ContainerAttachWebsocket {
    parameter: Parameter$ContainerAttachWebsocket;
}
export type ResponseContentType$ContainerWait = keyof Response$ContainerWait$Status$200;
export interface Params$ContainerWait {
    parameter: Parameter$ContainerWait;
}
export interface Params$ContainerDelete {
    parameter: Parameter$ContainerDelete;
}
export interface Params$ContainerArchive {
    parameter: Parameter$ContainerArchive;
}
export type RequestContentType$PutContainerArchive = keyof RequestBody$PutContainerArchive;
export interface Params$PutContainerArchive<T extends RequestContentType$PutContainerArchive> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$PutContainerArchive;
    requestBody: RequestBody$PutContainerArchive[T];
}
export interface Params$ContainerArchiveInfo {
    parameter: Parameter$ContainerArchiveInfo;
}
export type ResponseContentType$ContainerPrune = keyof Response$ContainerPrune$Status$200;
export interface Params$ContainerPrune {
    parameter: Parameter$ContainerPrune;
}
export type ResponseContentType$ImageList = keyof Response$ImageList$Status$200;
export interface Params$ImageList {
    parameter: Parameter$ImageList;
}
export type RequestContentType$ImageBuild = keyof RequestBody$ImageBuild;
export interface Params$ImageBuild {
    parameter: Parameter$ImageBuild;
    requestBody: RequestBody$ImageBuild["application/octet-stream"];
}
export type ResponseContentType$BuildPrune = keyof Response$BuildPrune$Status$200;
export type RequestContentType$ImageCreate = keyof RequestBody$ImageCreate;
export interface Params$ImageCreate<T extends RequestContentType$ImageCreate> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$ImageCreate;
    requestBody: RequestBody$ImageCreate[T];
}
export type ResponseContentType$ImageInspect = keyof Response$ImageInspect$Status$200;
export interface Params$ImageInspect {
    parameter: Parameter$ImageInspect;
}
export type ResponseContentType$ImageHistory = keyof Response$ImageHistory$Status$200;
export interface Params$ImageHistory {
    parameter: Parameter$ImageHistory;
}
export interface Params$ImagePush {
    parameter: Parameter$ImagePush;
}
export interface Params$ImageTag {
    parameter: Parameter$ImageTag;
}
export type ResponseContentType$ImageDelete = keyof Response$ImageDelete$Status$200;
export interface Params$ImageDelete {
    parameter: Parameter$ImageDelete;
}
export type ResponseContentType$ImageSearch = keyof Response$ImageSearch$Status$200;
export interface Params$ImageSearch {
    parameter: Parameter$ImageSearch;
}
export type ResponseContentType$ImagePrune = keyof Response$ImagePrune$Status$200;
export interface Params$ImagePrune {
    parameter: Parameter$ImagePrune;
}
export type RequestContentType$SystemAuth = keyof RequestBody$SystemAuth;
export type ResponseContentType$SystemAuth = keyof Response$SystemAuth$Status$200;
export interface Params$SystemAuth {
    requestBody: RequestBody$SystemAuth["application/json"];
}
export type ResponseContentType$SystemInfo = keyof Response$SystemInfo$Status$200;
export type ResponseContentType$SystemVersion = keyof Response$SystemVersion$Status$200;
export type ResponseContentType$SystemPing = keyof Response$SystemPing$Status$200;
export type RequestContentType$ImageCommit = keyof RequestBody$ImageCommit;
export type ResponseContentType$ImageCommit = keyof Response$ImageCommit$Status$201;
export interface Params$ImageCommit {
    parameter: Parameter$ImageCommit;
    requestBody: RequestBody$ImageCommit["application/json"];
}
export type ResponseContentType$SystemEvents = keyof Response$SystemEvents$Status$200;
export interface Params$SystemEvents {
    parameter: Parameter$SystemEvents;
}
export type ResponseContentType$SystemDataUsage = keyof Response$SystemDataUsage$Status$200;
export interface Params$SystemDataUsage<U extends ResponseContentType$SystemDataUsage> {
    headers: {
        Accept: U;
    };
}
export type ResponseContentType$ImageGet = keyof Response$ImageGet$Status$200;
export interface Params$ImageGet {
    parameter: Parameter$ImageGet;
}
export type ResponseContentType$ImageGetAll = keyof Response$ImageGetAll$Status$200;
export interface Params$ImageGetAll {
    parameter: Parameter$ImageGetAll;
}
export type RequestContentType$ImageLoad = keyof RequestBody$ImageLoad;
export interface Params$ImageLoad {
    parameter: Parameter$ImageLoad;
    requestBody: RequestBody$ImageLoad["application/x-tar"];
}
export type RequestContentType$ContainerExec = keyof RequestBody$ContainerExec;
export type ResponseContentType$ContainerExec = keyof Response$ContainerExec$Status$201;
export interface Params$ContainerExec {
    parameter: Parameter$ContainerExec;
    requestBody: RequestBody$ContainerExec["application/json"];
}
export type RequestContentType$ExecStart = keyof RequestBody$ExecStart;
export interface Params$ExecStart {
    parameter: Parameter$ExecStart;
    requestBody: RequestBody$ExecStart["application/json"];
}
export interface Params$ExecResize {
    parameter: Parameter$ExecResize;
}
export type ResponseContentType$ExecInspect = keyof Response$ExecInspect$Status$200;
export interface Params$ExecInspect {
    parameter: Parameter$ExecInspect;
}
export type ResponseContentType$VolumeList = keyof Response$VolumeList$Status$200;
export interface Params$VolumeList {
    parameter: Parameter$VolumeList;
}
export type RequestContentType$VolumeCreate = keyof RequestBody$VolumeCreate;
export type ResponseContentType$VolumeCreate = keyof Response$VolumeCreate$Status$201;
export interface Params$VolumeCreate {
    requestBody: RequestBody$VolumeCreate["application/json"];
}
export type ResponseContentType$VolumeInspect = keyof Response$VolumeInspect$Status$200;
export interface Params$VolumeInspect {
    parameter: Parameter$VolumeInspect;
}
export interface Params$VolumeDelete {
    parameter: Parameter$VolumeDelete;
}
export type ResponseContentType$VolumePrune = keyof Response$VolumePrune$Status$200;
export interface Params$VolumePrune {
    parameter: Parameter$VolumePrune;
}
export type ResponseContentType$NetworkList = keyof Response$NetworkList$Status$200;
export interface Params$NetworkList {
    parameter: Parameter$NetworkList;
}
export type ResponseContentType$NetworkInspect = keyof Response$NetworkInspect$Status$200;
export interface Params$NetworkInspect {
    parameter: Parameter$NetworkInspect;
}
export interface Params$NetworkDelete {
    parameter: Parameter$NetworkDelete;
}
export type RequestContentType$NetworkCreate = keyof RequestBody$NetworkCreate;
export type ResponseContentType$NetworkCreate = keyof Response$NetworkCreate$Status$201;
export interface Params$NetworkCreate {
    requestBody: RequestBody$NetworkCreate["application/json"];
}
export type RequestContentType$NetworkConnect = keyof RequestBody$NetworkConnect;
export interface Params$NetworkConnect {
    parameter: Parameter$NetworkConnect;
    requestBody: RequestBody$NetworkConnect["application/json"];
}
export type RequestContentType$NetworkDisconnect = keyof RequestBody$NetworkDisconnect;
export interface Params$NetworkDisconnect {
    parameter: Parameter$NetworkDisconnect;
    requestBody: RequestBody$NetworkDisconnect["application/json"];
}
export type ResponseContentType$NetworkPrune = keyof Response$NetworkPrune$Status$200;
export interface Params$NetworkPrune {
    parameter: Parameter$NetworkPrune;
}
export type ResponseContentType$PluginList = keyof Response$PluginList$Status$200;
export interface Params$PluginList {
    parameter: Parameter$PluginList;
}
export type ResponseContentType$GetPluginPrivileges = keyof Response$GetPluginPrivileges$Status$200;
export interface Params$GetPluginPrivileges<U extends ResponseContentType$GetPluginPrivileges> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$GetPluginPrivileges;
}
export type RequestContentType$PluginPull = keyof RequestBody$PluginPull;
export interface Params$PluginPull<T extends RequestContentType$PluginPull> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$PluginPull;
    requestBody: RequestBody$PluginPull[T];
}
export type ResponseContentType$PluginInspect = keyof Response$PluginInspect$Status$200;
export interface Params$PluginInspect<U extends ResponseContentType$PluginInspect> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$PluginInspect;
}
export type ResponseContentType$PluginDelete = keyof Response$PluginDelete$Status$200;
export interface Params$PluginDelete<U extends ResponseContentType$PluginDelete> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$PluginDelete;
}
export interface Params$PluginEnable {
    parameter: Parameter$PluginEnable;
}
export interface Params$PluginDisable {
    parameter: Parameter$PluginDisable;
}
export type RequestContentType$PluginUpgrade = keyof RequestBody$PluginUpgrade;
export interface Params$PluginUpgrade<T extends RequestContentType$PluginUpgrade> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$PluginUpgrade;
    requestBody: RequestBody$PluginUpgrade[T];
}
export type RequestContentType$PluginCreate = keyof RequestBody$PluginCreate;
export interface Params$PluginCreate {
    parameter: Parameter$PluginCreate;
    requestBody: RequestBody$PluginCreate["application/x-tar"];
}
export interface Params$PluginPush {
    parameter: Parameter$PluginPush;
}
export type RequestContentType$PluginSet = keyof RequestBody$PluginSet;
export interface Params$PluginSet {
    parameter: Parameter$PluginSet;
    requestBody: RequestBody$PluginSet["application/json"];
}
export type ResponseContentType$NodeList = keyof Response$NodeList$Status$200;
export interface Params$NodeList<U extends ResponseContentType$NodeList> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$NodeList;
}
export type ResponseContentType$NodeInspect = keyof Response$NodeInspect$Status$200;
export interface Params$NodeInspect<U extends ResponseContentType$NodeInspect> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$NodeInspect;
}
export interface Params$NodeDelete {
    parameter: Parameter$NodeDelete;
}
export type RequestContentType$NodeUpdate = keyof RequestBody$NodeUpdate;
export interface Params$NodeUpdate<T extends RequestContentType$NodeUpdate> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$NodeUpdate;
    requestBody: RequestBody$NodeUpdate[T];
}
export type ResponseContentType$SwarmInspect = keyof Response$SwarmInspect$Status$200;
export interface Params$SwarmInspect<U extends ResponseContentType$SwarmInspect> {
    headers: {
        Accept: U;
    };
}
export type RequestContentType$SwarmInit = keyof RequestBody$SwarmInit;
export type ResponseContentType$SwarmInit = keyof Response$SwarmInit$Status$200;
export interface Params$SwarmInit<T extends RequestContentType$SwarmInit, U extends ResponseContentType$SwarmInit> {
    headers: {
        "Content-Type": T;
        Accept: U;
    };
    requestBody: RequestBody$SwarmInit[T];
}
export type RequestContentType$SwarmJoin = keyof RequestBody$SwarmJoin;
export interface Params$SwarmJoin<T extends RequestContentType$SwarmJoin> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$SwarmJoin[T];
}
export interface Params$SwarmLeave {
    parameter: Parameter$SwarmLeave;
}
export type RequestContentType$SwarmUpdate = keyof RequestBody$SwarmUpdate;
export interface Params$SwarmUpdate<T extends RequestContentType$SwarmUpdate> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$SwarmUpdate;
    requestBody: RequestBody$SwarmUpdate[T];
}
export type ResponseContentType$SwarmUnlockkey = keyof Response$SwarmUnlockkey$Status$200;
export interface Params$SwarmUnlockkey<U extends ResponseContentType$SwarmUnlockkey> {
    headers: {
        Accept: U;
    };
}
export type RequestContentType$SwarmUnlock = keyof RequestBody$SwarmUnlock;
export interface Params$SwarmUnlock {
    requestBody: RequestBody$SwarmUnlock["application/json"];
}
export type ResponseContentType$ServiceList = keyof Response$ServiceList$Status$200;
export interface Params$ServiceList<U extends ResponseContentType$ServiceList> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$ServiceList;
}
export type RequestContentType$ServiceCreate = keyof RequestBody$ServiceCreate;
export type ResponseContentType$ServiceCreate = keyof Response$ServiceCreate$Status$201;
export interface Params$ServiceCreate {
    parameter: Parameter$ServiceCreate;
    requestBody: RequestBody$ServiceCreate["application/json"];
}
export type ResponseContentType$ServiceInspect = keyof Response$ServiceInspect$Status$200;
export interface Params$ServiceInspect<U extends ResponseContentType$ServiceInspect> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$ServiceInspect;
}
export interface Params$ServiceDelete {
    parameter: Parameter$ServiceDelete;
}
export type RequestContentType$ServiceUpdate = keyof RequestBody$ServiceUpdate;
export type ResponseContentType$ServiceUpdate = keyof Response$ServiceUpdate$Status$200;
export interface Params$ServiceUpdate {
    parameter: Parameter$ServiceUpdate;
    requestBody: RequestBody$ServiceUpdate["application/json"];
}
export type ResponseContentType$ServiceLogs = keyof Response$ServiceLogs$Status$200;
export interface Params$ServiceLogs<U extends ResponseContentType$ServiceLogs> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$ServiceLogs;
}
export type ResponseContentType$TaskList = keyof Response$TaskList$Status$200;
export interface Params$TaskList {
    parameter: Parameter$TaskList;
}
export type ResponseContentType$TaskInspect = keyof Response$TaskInspect$Status$200;
export interface Params$TaskInspect {
    parameter: Parameter$TaskInspect;
}
export type ResponseContentType$TaskLogs = keyof Response$TaskLogs$Status$200;
export interface Params$TaskLogs<U extends ResponseContentType$TaskLogs> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$TaskLogs;
}
export type ResponseContentType$SecretList = keyof Response$SecretList$Status$200;
export interface Params$SecretList {
    parameter: Parameter$SecretList;
}
export type RequestContentType$SecretCreate = keyof RequestBody$SecretCreate;
export type ResponseContentType$SecretCreate = keyof Response$SecretCreate$Status$201;
export interface Params$SecretCreate {
    requestBody: RequestBody$SecretCreate["application/json"];
}
export type ResponseContentType$SecretInspect = keyof Response$SecretInspect$Status$200;
export interface Params$SecretInspect {
    parameter: Parameter$SecretInspect;
}
export interface Params$SecretDelete {
    parameter: Parameter$SecretDelete;
}
export type RequestContentType$SecretUpdate = keyof RequestBody$SecretUpdate;
export interface Params$SecretUpdate<T extends RequestContentType$SecretUpdate> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$SecretUpdate;
    requestBody: RequestBody$SecretUpdate[T];
}
export type ResponseContentType$ConfigList = keyof Response$ConfigList$Status$200;
export interface Params$ConfigList {
    parameter: Parameter$ConfigList;
}
export type RequestContentType$ConfigCreate = keyof RequestBody$ConfigCreate;
export type ResponseContentType$ConfigCreate = keyof Response$ConfigCreate$Status$201;
export interface Params$ConfigCreate {
    requestBody: RequestBody$ConfigCreate["application/json"];
}
export type ResponseContentType$ConfigInspect = keyof Response$ConfigInspect$Status$200;
export interface Params$ConfigInspect {
    parameter: Parameter$ConfigInspect;
}
export interface Params$ConfigDelete {
    parameter: Parameter$ConfigDelete;
}
export type RequestContentType$ConfigUpdate = keyof RequestBody$ConfigUpdate;
export interface Params$ConfigUpdate<T extends RequestContentType$ConfigUpdate> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$ConfigUpdate;
    requestBody: RequestBody$ConfigUpdate[T];
}
export type ResponseContentType$DistributionInspect = keyof Response$DistributionInspect$Status$200;
export interface Params$DistributionInspect {
    parameter: Parameter$DistributionInspect;
}
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$ContainerList$Status$200 | Response$ContainerCreate$Status$201 | Response$ContainerInspect$Status$200 | Response$ContainerTop$Status$200 | Response$ContainerLogs$Status$200 | Response$ContainerChanges$Status$200 | Response$ContainerStats$Status$200 | Response$ContainerUpdate$Status$200 | Response$ContainerWait$Status$200 | Response$ContainerPrune$Status$200 | Response$ImageList$Status$200 | Response$BuildPrune$Status$200 | Response$ImageInspect$Status$200 | Response$ImageHistory$Status$200 | Response$ImageDelete$Status$200 | Response$ImageSearch$Status$200 | Response$ImagePrune$Status$200 | Response$SystemAuth$Status$200 | Response$SystemInfo$Status$200 | Response$SystemVersion$Status$200 | Response$SystemPing$Status$200 | Response$ImageCommit$Status$201 | Response$SystemEvents$Status$200 | Response$SystemDataUsage$Status$200 | Response$ImageGet$Status$200 | Response$ImageGetAll$Status$200 | Response$ContainerExec$Status$201 | Response$ExecInspect$Status$200 | Response$VolumeList$Status$200 | Response$VolumeCreate$Status$201 | Response$VolumeInspect$Status$200 | Response$VolumePrune$Status$200 | Response$NetworkList$Status$200 | Response$NetworkInspect$Status$200 | Response$NetworkCreate$Status$201 | Response$NetworkPrune$Status$200 | Response$PluginList$Status$200 | Response$GetPluginPrivileges$Status$200 | Response$PluginInspect$Status$200 | Response$PluginDelete$Status$200 | Response$NodeList$Status$200 | Response$NodeInspect$Status$200 | Response$SwarmInspect$Status$200 | Response$SwarmInit$Status$200 | Response$SwarmUnlockkey$Status$200 | Response$ServiceList$Status$200 | Response$ServiceCreate$Status$201 | Response$ServiceInspect$Status$200 | Response$ServiceUpdate$Status$200 | Response$ServiceLogs$Status$200 | Response$TaskList$Status$200 | Response$TaskInspect$Status$200 | Response$TaskLogs$Status$200 | Response$SecretList$Status$200 | Response$SecretCreate$Status$201 | Response$SecretInspect$Status$200 | Response$ConfigList$Status$200 | Response$ConfigCreate$Status$201 | Response$ConfigInspect$Status$200 | Response$DistributionInspect$Status$200;
export namespace ErrorResponse {
    export type ContainerList = Response$ContainerList$Status$400 | Response$ContainerList$Status$500;
    export type ContainerCreate = Response$ContainerCreate$Status$400 | Response$ContainerCreate$Status$404 | Response$ContainerCreate$Status$409 | Response$ContainerCreate$Status$500;
    export type ContainerInspect = Response$ContainerInspect$Status$404 | Response$ContainerInspect$Status$500;
    export type ContainerTop = Response$ContainerTop$Status$404 | Response$ContainerTop$Status$500;
    export type ContainerLogs = Response$ContainerLogs$Status$404 | Response$ContainerLogs$Status$500;
    export type ContainerChanges = Response$ContainerChanges$Status$404 | Response$ContainerChanges$Status$500;
    export type ContainerExport = Response$ContainerExport$Status$404 | Response$ContainerExport$Status$500;
    export type ContainerStats = Response$ContainerStats$Status$404 | Response$ContainerStats$Status$500;
    export type ContainerResize = Response$ContainerResize$Status$404 | Response$ContainerResize$Status$500;
    export type ContainerStart = Response$ContainerStart$Status$404 | Response$ContainerStart$Status$500;
    export type ContainerStop = Response$ContainerStop$Status$404 | Response$ContainerStop$Status$500;
    export type ContainerRestart = Response$ContainerRestart$Status$404 | Response$ContainerRestart$Status$500;
    export type ContainerKill = Response$ContainerKill$Status$404 | Response$ContainerKill$Status$409 | Response$ContainerKill$Status$500;
    export type ContainerUpdate = Response$ContainerUpdate$Status$404 | Response$ContainerUpdate$Status$500;
    export type ContainerRename = Response$ContainerRename$Status$404 | Response$ContainerRename$Status$409 | Response$ContainerRename$Status$500;
    export type ContainerPause = Response$ContainerPause$Status$404 | Response$ContainerPause$Status$500;
    export type ContainerUnpause = Response$ContainerUnpause$Status$404 | Response$ContainerUnpause$Status$500;
    export type ContainerAttach = Response$ContainerAttach$Status$400 | Response$ContainerAttach$Status$404 | Response$ContainerAttach$Status$500;
    export type ContainerAttachWebsocket = Response$ContainerAttachWebsocket$Status$400 | Response$ContainerAttachWebsocket$Status$404 | Response$ContainerAttachWebsocket$Status$500;
    export type ContainerWait = Response$ContainerWait$Status$404 | Response$ContainerWait$Status$500;
    export type ContainerDelete = Response$ContainerDelete$Status$400 | Response$ContainerDelete$Status$404 | Response$ContainerDelete$Status$409 | Response$ContainerDelete$Status$500;
    export type ContainerArchive = Response$ContainerArchive$Status$400 | Response$ContainerArchive$Status$404 | Response$ContainerArchive$Status$500;
    export type PutContainerArchive = Response$PutContainerArchive$Status$400 | Response$PutContainerArchive$Status$403 | Response$PutContainerArchive$Status$404 | Response$PutContainerArchive$Status$500;
    export type ContainerArchiveInfo = Response$ContainerArchiveInfo$Status$400 | Response$ContainerArchiveInfo$Status$404 | Response$ContainerArchiveInfo$Status$500;
    export type ContainerPrune = Response$ContainerPrune$Status$500;
    export type ImageList = Response$ImageList$Status$500;
    export type ImageBuild = Response$ImageBuild$Status$400 | Response$ImageBuild$Status$500;
    export type BuildPrune = Response$BuildPrune$Status$500;
    export type ImageCreate = Response$ImageCreate$Status$404 | Response$ImageCreate$Status$500;
    export type ImageInspect = Response$ImageInspect$Status$404 | Response$ImageInspect$Status$500;
    export type ImageHistory = Response$ImageHistory$Status$404 | Response$ImageHistory$Status$500;
    export type ImagePush = Response$ImagePush$Status$404 | Response$ImagePush$Status$500;
    export type ImageTag = Response$ImageTag$Status$400 | Response$ImageTag$Status$404 | Response$ImageTag$Status$409 | Response$ImageTag$Status$500;
    export type ImageDelete = Response$ImageDelete$Status$404 | Response$ImageDelete$Status$409 | Response$ImageDelete$Status$500;
    export type ImageSearch = Response$ImageSearch$Status$500;
    export type ImagePrune = Response$ImagePrune$Status$500;
    export type SystemAuth = Response$SystemAuth$Status$500;
    export type SystemInfo = Response$SystemInfo$Status$500;
    export type SystemVersion = Response$SystemVersion$Status$500;
    export type SystemPing = Response$SystemPing$Status$500;
    export type ImageCommit = Response$ImageCommit$Status$404 | Response$ImageCommit$Status$500;
    export type SystemEvents = Response$SystemEvents$Status$400 | Response$SystemEvents$Status$500;
    export type SystemDataUsage = Response$SystemDataUsage$Status$500;
    export type ImageGet = Response$ImageGet$Status$500;
    export type ImageGetAll = Response$ImageGetAll$Status$500;
    export type ImageLoad = Response$ImageLoad$Status$500;
    export type ContainerExec = Response$ContainerExec$Status$404 | Response$ContainerExec$Status$409 | Response$ContainerExec$Status$500;
    export type ExecStart = Response$ExecStart$Status$404 | Response$ExecStart$Status$409;
    export type ExecResize = Response$ExecResize$Status$400 | Response$ExecResize$Status$404 | Response$ExecResize$Status$500;
    export type ExecInspect = Response$ExecInspect$Status$404 | Response$ExecInspect$Status$500;
    export type VolumeList = Response$VolumeList$Status$500;
    export type VolumeCreate = Response$VolumeCreate$Status$500;
    export type VolumeInspect = Response$VolumeInspect$Status$404 | Response$VolumeInspect$Status$500;
    export type VolumeDelete = Response$VolumeDelete$Status$404 | Response$VolumeDelete$Status$409 | Response$VolumeDelete$Status$500;
    export type VolumePrune = Response$VolumePrune$Status$500;
    export type NetworkList = Response$NetworkList$Status$500;
    export type NetworkInspect = Response$NetworkInspect$Status$404 | Response$NetworkInspect$Status$500;
    export type NetworkDelete = Response$NetworkDelete$Status$403 | Response$NetworkDelete$Status$404 | Response$NetworkDelete$Status$500;
    export type NetworkCreate = Response$NetworkCreate$Status$403 | Response$NetworkCreate$Status$404 | Response$NetworkCreate$Status$500;
    export type NetworkConnect = Response$NetworkConnect$Status$403 | Response$NetworkConnect$Status$404 | Response$NetworkConnect$Status$500;
    export type NetworkDisconnect = Response$NetworkDisconnect$Status$403 | Response$NetworkDisconnect$Status$404 | Response$NetworkDisconnect$Status$500;
    export type NetworkPrune = Response$NetworkPrune$Status$500;
    export type PluginList = Response$PluginList$Status$500;
    export type GetPluginPrivileges = Response$GetPluginPrivileges$Status$500;
    export type PluginPull = Response$PluginPull$Status$500;
    export type PluginInspect = Response$PluginInspect$Status$404 | Response$PluginInspect$Status$500;
    export type PluginDelete = Response$PluginDelete$Status$404 | Response$PluginDelete$Status$500;
    export type PluginEnable = Response$PluginEnable$Status$404 | Response$PluginEnable$Status$500;
    export type PluginDisable = Response$PluginDisable$Status$404 | Response$PluginDisable$Status$500;
    export type PluginUpgrade = Response$PluginUpgrade$Status$404 | Response$PluginUpgrade$Status$500;
    export type PluginCreate = Response$PluginCreate$Status$500;
    export type PluginPush = Response$PluginPush$Status$404 | Response$PluginPush$Status$500;
    export type PluginSet = Response$PluginSet$Status$404 | Response$PluginSet$Status$500;
    export type NodeList = Response$NodeList$Status$500 | Response$NodeList$Status$503;
    export type NodeInspect = Response$NodeInspect$Status$404 | Response$NodeInspect$Status$500 | Response$NodeInspect$Status$503;
    export type NodeDelete = Response$NodeDelete$Status$404 | Response$NodeDelete$Status$500 | Response$NodeDelete$Status$503;
    export type NodeUpdate = Response$NodeUpdate$Status$400 | Response$NodeUpdate$Status$404 | Response$NodeUpdate$Status$500 | Response$NodeUpdate$Status$503;
    export type SwarmInspect = Response$SwarmInspect$Status$404 | Response$SwarmInspect$Status$500 | Response$SwarmInspect$Status$503;
    export type SwarmInit = Response$SwarmInit$Status$400 | Response$SwarmInit$Status$500 | Response$SwarmInit$Status$503;
    export type SwarmJoin = Response$SwarmJoin$Status$400 | Response$SwarmJoin$Status$500 | Response$SwarmJoin$Status$503;
    export type SwarmLeave = Response$SwarmLeave$Status$500 | Response$SwarmLeave$Status$503;
    export type SwarmUpdate = Response$SwarmUpdate$Status$400 | Response$SwarmUpdate$Status$500 | Response$SwarmUpdate$Status$503;
    export type SwarmUnlockkey = Response$SwarmUnlockkey$Status$500 | Response$SwarmUnlockkey$Status$503;
    export type SwarmUnlock = Response$SwarmUnlock$Status$500 | Response$SwarmUnlock$Status$503;
    export type ServiceList = Response$ServiceList$Status$500 | Response$ServiceList$Status$503;
    export type ServiceCreate = Response$ServiceCreate$Status$400 | Response$ServiceCreate$Status$403 | Response$ServiceCreate$Status$409 | Response$ServiceCreate$Status$500 | Response$ServiceCreate$Status$503;
    export type ServiceInspect = Response$ServiceInspect$Status$404 | Response$ServiceInspect$Status$500 | Response$ServiceInspect$Status$503;
    export type ServiceDelete = Response$ServiceDelete$Status$404 | Response$ServiceDelete$Status$500 | Response$ServiceDelete$Status$503;
    export type ServiceUpdate = Response$ServiceUpdate$Status$400 | Response$ServiceUpdate$Status$404 | Response$ServiceUpdate$Status$500 | Response$ServiceUpdate$Status$503;
    export type ServiceLogs = Response$ServiceLogs$Status$404 | Response$ServiceLogs$Status$500 | Response$ServiceLogs$Status$503;
    export type TaskList = Response$TaskList$Status$500 | Response$TaskList$Status$503;
    export type TaskInspect = Response$TaskInspect$Status$404 | Response$TaskInspect$Status$500 | Response$TaskInspect$Status$503;
    export type TaskLogs = Response$TaskLogs$Status$404 | Response$TaskLogs$Status$500 | Response$TaskLogs$Status$503;
    export type SecretList = Response$SecretList$Status$500 | Response$SecretList$Status$503;
    export type SecretCreate = Response$SecretCreate$Status$409 | Response$SecretCreate$Status$500 | Response$SecretCreate$Status$503;
    export type SecretInspect = Response$SecretInspect$Status$404 | Response$SecretInspect$Status$500 | Response$SecretInspect$Status$503;
    export type SecretDelete = Response$SecretDelete$Status$404 | Response$SecretDelete$Status$500 | Response$SecretDelete$Status$503;
    export type SecretUpdate = Response$SecretUpdate$Status$400 | Response$SecretUpdate$Status$404 | Response$SecretUpdate$Status$500 | Response$SecretUpdate$Status$503;
    export type ConfigList = Response$ConfigList$Status$500 | Response$ConfigList$Status$503;
    export type ConfigCreate = Response$ConfigCreate$Status$409 | Response$ConfigCreate$Status$500 | Response$ConfigCreate$Status$503;
    export type ConfigInspect = Response$ConfigInspect$Status$404 | Response$ConfigInspect$Status$500 | Response$ConfigInspect$Status$503;
    export type ConfigDelete = Response$ConfigDelete$Status$404 | Response$ConfigDelete$Status$500 | Response$ConfigDelete$Status$503;
    export type ConfigUpdate = Response$ConfigUpdate$Status$400 | Response$ConfigUpdate$Status$404 | Response$ConfigUpdate$Status$500 | Response$ConfigUpdate$Status$503;
    export type DistributionInspect = Response$DistributionInspect$Status$401 | Response$DistributionInspect$Status$500;
    export type Session = Response$Session$Status$400 | Response$Session$Status$500;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => Promise<T>;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\/$/, ""); }
    /**
     * List containers
     * Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect).
     *
     * Note that it uses a different, smaller representation of a container than inspecting a single container. For example,
     * the list of linked containers is not propagated .
     *
     * operationId: ContainerList
     * Request URI: /containers/json
     */
    public async ContainerList(params: Params$ContainerList, option?: RequestOption): Promise<Response$ContainerList$Status$200["application/json"]> {
        const url = this.baseUrl + `/containers/json`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            all: { value: params.parameter.all, explode: false },
            limit: { value: params.parameter.limit, explode: false },
            size: { value: params.parameter.size, explode: false },
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Create a container
     * operationId: ContainerCreate
     * Request URI: /containers/create
     */
    public async ContainerCreate<RequestContentType extends RequestContentType$ContainerCreate>(params: Params$ContainerCreate<RequestContentType>, option?: RequestOption): Promise<Response$ContainerCreate$Status$201["application/json"]> {
        const url = this.baseUrl + `/containers/create`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            name: { value: params.parameter.name, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Inspect a container
     * Return low-level information about a container.
     * operationId: ContainerInspect
     * Request URI: /containers/{id}/json
     */
    public async ContainerInspect(params: Params$ContainerInspect, option?: RequestOption): Promise<Response$ContainerInspect$Status$200["application/json"]> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/json`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            size: { value: params.parameter.size, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * List processes running inside a container
     * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows.
     * operationId: ContainerTop
     * Request URI: /containers/{id}/top
     */
    public async ContainerTop<ResponseContentType extends ResponseContentType$ContainerTop>(params: Params$ContainerTop<ResponseContentType>, option?: RequestOption): Promise<Response$ContainerTop$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/top`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            ps_args: { value: params.parameter.ps_args, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Get container logs
     * Get `stdout` and `stderr` logs from a container.
     *
     * Note: This endpoint works only for containers with the `json-file` or `journald` logging driver.
     *
     * operationId: ContainerLogs
     * Request URI: /containers/{id}/logs
     */
    public async ContainerLogs<ResponseContentType extends ResponseContentType$ContainerLogs>(params: Params$ContainerLogs<ResponseContentType>, option?: RequestOption): Promise<Response$ContainerLogs$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/logs`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            follow: { value: params.parameter.follow, explode: false },
            stdout: { value: params.parameter.stdout, explode: false },
            stderr: { value: params.parameter.stderr, explode: false },
            since: { value: params.parameter.since, explode: false },
            until: { value: params.parameter.until, explode: false },
            timestamps: { value: params.parameter.timestamps, explode: false },
            tail: { value: params.parameter.tail, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Get changes on a container’s filesystem
     * Returns which files in a container's filesystem have been added, deleted,
     * or modified. The `Kind` of modification can be one of:
     *
     * - `0`: Modified
     * - `1`: Added
     * - `2`: Deleted
     *
     * operationId: ContainerChanges
     * Request URI: /containers/{id}/changes
     */
    public async ContainerChanges(params: Params$ContainerChanges, option?: RequestOption): Promise<Response$ContainerChanges$Status$200["application/json"]> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/changes`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Export a container
     * Export the contents of a container as a tarball.
     * operationId: ContainerExport
     * Request URI: /containers/{id}/export
     */
    public async ContainerExport(params: Params$ContainerExport, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/export`;
        const headers = {};
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Get container stats based on resource usage
     * This endpoint returns a live stream of a container’s resource usage
     * statistics.
     *
     * The `precpu_stats` is the CPU statistic of the *previous* read, and is
     * used to calculate the CPU usage percentage. It is not an exact copy
     * of the `cpu_stats` field.
     *
     * If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
     * nil then for compatibility with older daemons the length of the
     * corresponding `cpu_usage.percpu_usage` array should be used.
     *
     * operationId: ContainerStats
     * Request URI: /containers/{id}/stats
     */
    public async ContainerStats(params: Params$ContainerStats, option?: RequestOption): Promise<Response$ContainerStats$Status$200["application/json"]> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/stats`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            stream: { value: params.parameter.stream, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Resize a container TTY
     * Resize the TTY for a container. You must restart the container for the resize to take effect.
     * operationId: ContainerResize
     * Request URI: /containers/{id}/resize
     */
    public async ContainerResize(params: Params$ContainerResize, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/resize`;
        const headers = {};
        const queryParameters: QueryParameters = {
            h: { value: params.parameter.h, explode: false },
            w: { value: params.parameter.w, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Start a container
     * operationId: ContainerStart
     * Request URI: /containers/{id}/start
     */
    public async ContainerStart(params: Params$ContainerStart, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/start`;
        const headers = {};
        const queryParameters: QueryParameters = {
            detachKeys: { value: params.parameter.detachKeys, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Stop a container
     * operationId: ContainerStop
     * Request URI: /containers/{id}/stop
     */
    public async ContainerStop(params: Params$ContainerStop, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/stop`;
        const headers = {};
        const queryParameters: QueryParameters = {
            t: { value: params.parameter.t, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Restart a container
     * operationId: ContainerRestart
     * Request URI: /containers/{id}/restart
     */
    public async ContainerRestart(params: Params$ContainerRestart, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/restart`;
        const headers = {};
        const queryParameters: QueryParameters = {
            t: { value: params.parameter.t, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Kill a container
     * Send a POSIX signal to a container, defaulting to killing to the container.
     * operationId: ContainerKill
     * Request URI: /containers/{id}/kill
     */
    public async ContainerKill(params: Params$ContainerKill, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/kill`;
        const headers = {};
        const queryParameters: QueryParameters = {
            signal: { value: params.parameter.signal, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Update a container
     * Change various configuration options of a container without having to recreate it.
     * operationId: ContainerUpdate
     * Request URI: /containers/{id}/update
     */
    public async ContainerUpdate(params: Params$ContainerUpdate, option?: RequestOption): Promise<Response$ContainerUpdate$Status$200["application/json"]> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/update`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Rename a container
     * operationId: ContainerRename
     * Request URI: /containers/{id}/rename
     */
    public async ContainerRename(params: Params$ContainerRename, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/rename`;
        const headers = {};
        const queryParameters: QueryParameters = {
            name: { value: params.parameter.name, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Pause a container
     * Use the cgroups freezer to suspend all processes in a container.
     *
     * Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the cgroups freezer the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed.
     *
     * operationId: ContainerPause
     * Request URI: /containers/{id}/pause
     */
    public async ContainerPause(params: Params$ContainerPause, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/pause`;
        const headers = {};
        return this.apiClient.request("POST", url, headers, undefined, undefined, option);
    }
    /**
     * Unpause a container
     * Resume a container which has been paused.
     * operationId: ContainerUnpause
     * Request URI: /containers/{id}/unpause
     */
    public async ContainerUnpause(params: Params$ContainerUnpause, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/unpause`;
        const headers = {};
        return this.apiClient.request("POST", url, headers, undefined, undefined, option);
    }
    /**
     * Attach to a container
     * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.
     *
     * Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.
     *
     * See [the documentation for the `docker attach` command](/engine/reference/commandline/attach/) for more details.
     *
     * ### Hijacking
     *
     * This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.
     *
     * This is the response from the daemon for an attach request:
     *
     * ```
     * HTTP/1.1 200 OK
     * Content-Type: application/vnd.docker.raw-stream
     *
     * [STREAM]
     * ```
     *
     * After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.
     *
     * To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.
     *
     * For example, the client sends this request to upgrade the connection:
     *
     * ```
     * POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
     * Upgrade: tcp
     * Connection: Upgrade
     * ```
     *
     * The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:
     *
     * ```
     * HTTP/1.1 101 UPGRADED
     * Content-Type: application/vnd.docker.raw-stream
     * Connection: Upgrade
     * Upgrade: tcp
     *
     * [STREAM]
     * ```
     *
     * ### Stream format
     *
     * When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.
     *
     * The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).
     *
     * It is encoded on the first eight bytes like this:
     *
     * ```go
     * header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
     * ```
     *
     * `STREAM_TYPE` can be:
     *
     * - 0: `stdin` (is written on `stdout`)
     * - 1: `stdout`
     * - 2: `stderr`
     *
     * `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.
     *
     * Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.
     *
     * The simplest way to implement this protocol is the following:
     *
     * 1. Read 8 bytes.
     * 2. Choose `stdout` or `stderr` depending on the first byte.
     * 3. Extract the frame size from the last four bytes.
     * 4. Read the extracted size and output it on the correct output.
     * 5. Goto 1.
     *
     * ### Stream format when using a TTY
     *
     * When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`.
     *
     * operationId: ContainerAttach
     * Request URI: /containers/{id}/attach
     */
    public async ContainerAttach(params: Params$ContainerAttach, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/attach`;
        const headers = {};
        const queryParameters: QueryParameters = {
            detachKeys: { value: params.parameter.detachKeys, explode: false },
            logs: { value: params.parameter.logs, explode: false },
            stream: { value: params.parameter.stream, explode: false },
            stdin: { value: params.parameter.stdin, explode: false },
            stdout: { value: params.parameter.stdout, explode: false },
            stderr: { value: params.parameter.stderr, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Attach to a container via a websocket
     * operationId: ContainerAttachWebsocket
     * Request URI: /containers/{id}/attach/ws
     */
    public async ContainerAttachWebsocket(params: Params$ContainerAttachWebsocket, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/attach/ws`;
        const headers = {};
        const queryParameters: QueryParameters = {
            detachKeys: { value: params.parameter.detachKeys, explode: false },
            logs: { value: params.parameter.logs, explode: false },
            stream: { value: params.parameter.stream, explode: false },
            stdin: { value: params.parameter.stdin, explode: false },
            stdout: { value: params.parameter.stdout, explode: false },
            stderr: { value: params.parameter.stderr, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Wait for a container
     * Block until a container stops, then returns the exit code.
     * operationId: ContainerWait
     * Request URI: /containers/{id}/wait
     */
    public async ContainerWait(params: Params$ContainerWait, option?: RequestOption): Promise<Response$ContainerWait$Status$200["application/json"]> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/wait`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            condition: { value: params.parameter.condition, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Remove a container
     * operationId: ContainerDelete
     * Request URI: /containers/{id}
     */
    public async ContainerDelete(params: Params$ContainerDelete, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            v: { value: params.parameter.v, explode: false },
            force: { value: params.parameter.force, explode: false },
            link: { value: params.parameter.link, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * Get an archive of a filesystem resource in a container
     * Get a tar archive of a resource in the filesystem of container id.
     * operationId: ContainerArchive
     * Request URI: /containers/{id}/archive
     */
    public async ContainerArchive(params: Params$ContainerArchive, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/archive`;
        const headers = {};
        const queryParameters: QueryParameters = {
            path: { value: params.parameter.path, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Extract an archive of files or folders to a directory in a container
     * Upload a tar archive to be extracted to a path in the filesystem of container id.
     * operationId: PutContainerArchive
     * Request URI: /containers/{id}/archive
     */
    public async PutContainerArchive<RequestContentType extends RequestContentType$PutContainerArchive>(params: Params$PutContainerArchive<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/archive`;
        const headers = {
            "Content-Type": params.headers["Content-Type"]
        };
        const queryParameters: QueryParameters = {
            path: { value: params.parameter.path, explode: false },
            noOverwriteDirNonDir: { value: params.parameter.noOverwriteDirNonDir, explode: false }
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Get information about files in a container
     * A response header `X-Docker-Container-Path-Stat` is return containing a base64 - encoded JSON object with some filesystem header information about the path.
     * operationId: ContainerArchiveInfo
     * Request URI: /containers/{id}/archive
     */
    public async ContainerArchiveInfo(params: Params$ContainerArchiveInfo, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/archive`;
        const headers = {};
        const queryParameters: QueryParameters = {
            path: { value: params.parameter.path, explode: false }
        };
        return this.apiClient.request("HEAD", url, headers, undefined, queryParameters, option);
    }
    /**
     * Delete stopped containers
     * operationId: ContainerPrune
     * Request URI: /containers/prune
     */
    public async ContainerPrune(params: Params$ContainerPrune, option?: RequestOption): Promise<Response$ContainerPrune$Status$200["application/json"]> {
        const url = this.baseUrl + `/containers/prune`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * List Images
     * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
     * operationId: ImageList
     * Request URI: /images/json
     */
    public async ImageList(params: Params$ImageList, option?: RequestOption): Promise<Response$ImageList$Status$200["application/json"]> {
        const url = this.baseUrl + `/images/json`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            all: { value: params.parameter.all, explode: false },
            filters: { value: params.parameter.filters, explode: false },
            digests: { value: params.parameter.digests, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Build an image
     * Build an image from a tar archive with a `Dockerfile` in it.
     *
     * The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](/engine/reference/builder/).
     *
     * The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.
     *
     * The build is canceled if the client drops the connection by quitting or being killed.
     *
     * operationId: ImageBuild
     * Request URI: /build
     */
    public async ImageBuild(params: Params$ImageBuild, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/build`;
        const headers = {
            "Content-Type": "application/octet-stream",
            "Content-type": params.parameter["Content-type"],
            "X-Registry-Config": params.parameter["X-Registry-Config"]
        };
        const queryParameters: QueryParameters = {
            dockerfile: { value: params.parameter.dockerfile, explode: false },
            t: { value: params.parameter.t, explode: false },
            extrahosts: { value: params.parameter.extrahosts, explode: false },
            remote: { value: params.parameter.remote, explode: false },
            q: { value: params.parameter.q, explode: false },
            nocache: { value: params.parameter.nocache, explode: false },
            cachefrom: { value: params.parameter.cachefrom, explode: false },
            pull: { value: params.parameter.pull, explode: false },
            rm: { value: params.parameter.rm, explode: false },
            forcerm: { value: params.parameter.forcerm, explode: false },
            memory: { value: params.parameter.memory, explode: false },
            memswap: { value: params.parameter.memswap, explode: false },
            cpushares: { value: params.parameter.cpushares, explode: false },
            cpusetcpus: { value: params.parameter.cpusetcpus, explode: false },
            cpuperiod: { value: params.parameter.cpuperiod, explode: false },
            cpuquota: { value: params.parameter.cpuquota, explode: false },
            buildargs: { value: params.parameter.buildargs, explode: false },
            shmsize: { value: params.parameter.shmsize, explode: false },
            squash: { value: params.parameter.squash, explode: false },
            labels: { value: params.parameter.labels, explode: false },
            networkmode: { value: params.parameter.networkmode, explode: false },
            platform: { value: params.parameter.platform, explode: false },
            target: { value: params.parameter.target, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Delete builder cache
     * operationId: BuildPrune
     * Request URI: /build/prune
     */
    public async BuildPrune(option?: RequestOption): Promise<Response$BuildPrune$Status$200["application/json"]> {
        const url = this.baseUrl + `/build/prune`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, undefined, undefined, option);
    }
    /**
     * Create an image
     * Create an image by either pulling it from a registry or importing it.
     * operationId: ImageCreate
     * Request URI: /images/create
     */
    public async ImageCreate<RequestContentType extends RequestContentType$ImageCreate>(params: Params$ImageCreate<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/images/create`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            "X-Registry-Auth": params.parameter["X-Registry-Auth"]
        };
        const queryParameters: QueryParameters = {
            fromImage: { value: params.parameter.fromImage, explode: false },
            fromSrc: { value: params.parameter.fromSrc, explode: false },
            repo: { value: params.parameter.repo, explode: false },
            tag: { value: params.parameter.tag, explode: false },
            platform: { value: params.parameter.platform, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Inspect an image
     * Return low-level information about an image.
     * operationId: ImageInspect
     * Request URI: /images/{name}/json
     */
    public async ImageInspect(params: Params$ImageInspect, option?: RequestOption): Promise<Response$ImageInspect$Status$200["application/json"]> {
        const url = this.baseUrl + `/images/${params.parameter.name}/json`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Get the history of an image
     * Return parent layers of an image.
     * operationId: ImageHistory
     * Request URI: /images/{name}/history
     */
    public async ImageHistory(params: Params$ImageHistory, option?: RequestOption): Promise<Response$ImageHistory$Status$200["application/json"]> {
        const url = this.baseUrl + `/images/${params.parameter.name}/history`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Push an image
     * Push an image to a registry.
     *
     * If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.
     *
     * The push is cancelled if the HTTP connection is closed.
     *
     * operationId: ImagePush
     * Request URI: /images/{name}/push
     */
    public async ImagePush(params: Params$ImagePush, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/images/${params.parameter.name}/push`;
        const headers = {
            "X-Registry-Auth": params.parameter["X-Registry-Auth"]
        };
        const queryParameters: QueryParameters = {
            tag: { value: params.parameter.tag, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Tag an image
     * Tag an image so that it becomes part of a repository.
     * operationId: ImageTag
     * Request URI: /images/{name}/tag
     */
    public async ImageTag(params: Params$ImageTag, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/images/${params.parameter.name}/tag`;
        const headers = {};
        const queryParameters: QueryParameters = {
            repo: { value: params.parameter.repo, explode: false },
            tag: { value: params.parameter.tag, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Remove an image
     * Remove an image, along with any untagged parent images that were
     * referenced by that image.
     *
     * Images can't be removed if they have descendant images, are being
     * used by a running container or are being used by a build.
     *
     * operationId: ImageDelete
     * Request URI: /images/{name}
     */
    public async ImageDelete(params: Params$ImageDelete, option?: RequestOption): Promise<Response$ImageDelete$Status$200["application/json"]> {
        const url = this.baseUrl + `/images/${params.parameter.name}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            force: { value: params.parameter.force, explode: false },
            noprune: { value: params.parameter.noprune, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * Search images
     * Search for an image on Docker Hub.
     * operationId: ImageSearch
     * Request URI: /images/search
     */
    public async ImageSearch(params: Params$ImageSearch, option?: RequestOption): Promise<Response$ImageSearch$Status$200["application/json"]> {
        const url = this.baseUrl + `/images/search`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            term: { value: params.parameter.term, explode: false },
            limit: { value: params.parameter.limit, explode: false },
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Delete unused images
     * operationId: ImagePrune
     * Request URI: /images/prune
     */
    public async ImagePrune(params: Params$ImagePrune, option?: RequestOption): Promise<Response$ImagePrune$Status$200["application/json"]> {
        const url = this.baseUrl + `/images/prune`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Check auth configuration
     * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password.
     * operationId: SystemAuth
     * Request URI: /auth
     */
    public async SystemAuth(params: Params$SystemAuth, option?: RequestOption): Promise<Response$SystemAuth$Status$200["application/json"]> {
        const url = this.baseUrl + `/auth`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Get system information
     * operationId: SystemInfo
     * Request URI: /info
     */
    public async SystemInfo(option?: RequestOption): Promise<Response$SystemInfo$Status$200["application/json"]> {
        const url = this.baseUrl + `/info`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Get version
     * Returns the version of Docker that is running and various information about the system that Docker is running on.
     * operationId: SystemVersion
     * Request URI: /version
     */
    public async SystemVersion(option?: RequestOption): Promise<Response$SystemVersion$Status$200["application/json"]> {
        const url = this.baseUrl + `/version`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Ping
     * This is a dummy endpoint you can use to test if the server is accessible.
     * operationId: SystemPing
     * Request URI: /_ping
     */
    public async SystemPing(option?: RequestOption): Promise<Response$SystemPing$Status$200["text/plain"]> {
        const url = this.baseUrl + `/_ping`;
        const headers = {
            Accept: "text/plain"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Create a new image from a container
     * operationId: ImageCommit
     * Request URI: /commit
     */
    public async ImageCommit(params: Params$ImageCommit, option?: RequestOption): Promise<Response$ImageCommit$Status$201["application/json"]> {
        const url = this.baseUrl + `/commit`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            container: { value: params.parameter.container, explode: false },
            repo: { value: params.parameter.repo, explode: false },
            tag: { value: params.parameter.tag, explode: false },
            comment: { value: params.parameter.comment, explode: false },
            author: { value: params.parameter.author, explode: false },
            pause: { value: params.parameter.pause, explode: false },
            changes: { value: params.parameter.changes, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Monitor events
     * Stream real-time events from the server.
     *
     * Various objects within Docker report events when something happens to them.
     *
     * Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, and `update`
     *
     * Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, and `untag`
     *
     * Volumes report these events: `create`, `mount`, `unmount`, and `destroy`
     *
     * Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, and `remove`
     *
     * The Docker daemon reports these events: `reload`
     *
     * Services report these events: `create`, `update`, and `remove`
     *
     * Nodes report these events: `create`, `update`, and `remove`
     *
     * Secrets report these events: `create`, `update`, and `remove`
     *
     * Configs report these events: `create`, `update`, and `remove`
     *
     * operationId: SystemEvents
     * Request URI: /events
     */
    public async SystemEvents(params: Params$SystemEvents, option?: RequestOption): Promise<Response$SystemEvents$Status$200["application/json"]> {
        const url = this.baseUrl + `/events`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            since: { value: params.parameter.since, explode: false },
            until: { value: params.parameter.until, explode: false },
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Get data usage information
     * operationId: SystemDataUsage
     * Request URI: /system/df
     */
    public async SystemDataUsage<ResponseContentType extends ResponseContentType$SystemDataUsage>(params: Params$SystemDataUsage<ResponseContentType>, option?: RequestOption): Promise<Response$SystemDataUsage$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/system/df`;
        const headers = {
            Accept: params.headers.Accept
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Export an image
     * Get a tarball containing all images and metadata for a repository.
     *
     * If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.
     *
     * ### Image tarball format
     *
     * An image tarball contains one directory per image layer (named using its long ID), each containing these files:
     *
     * - `VERSION`: currently `1.0` - the file format version
     * - `json`: detailed layer information, similar to `docker inspect layer_id`
     * - `layer.tar`: A tarfile containing the filesystem changes in this layer
     *
     * The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.
     *
     * If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.
     *
     * ```json
     * {
     *   "hello-world": {
     *     "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
     *   }
     * }
     * ```
     *
     * operationId: ImageGet
     * Request URI: /images/{name}/get
     */
    public async ImageGet(params: Params$ImageGet, option?: RequestOption): Promise<Response$ImageGet$Status$200["application/x-tar"]> {
        const url = this.baseUrl + `/images/${params.parameter.name}/get`;
        const headers = {
            Accept: "application/x-tar"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Export several images
     * Get a tarball containing all images and metadata for several image repositories.
     *
     * For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.
     *
     * For details on the format, see [the export image endpoint](#operation/ImageGet).
     *
     * operationId: ImageGetAll
     * Request URI: /images/get
     */
    public async ImageGetAll(params: Params$ImageGetAll, option?: RequestOption): Promise<Response$ImageGetAll$Status$200["application/x-tar"]> {
        const url = this.baseUrl + `/images/get`;
        const headers = {
            Accept: "application/x-tar"
        };
        const queryParameters: QueryParameters = {
            names: { value: params.parameter.names, style: "form", explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Import images
     * Load a set of images and tags into a repository.
     *
     * For details on the format, see [the export image endpoint](#operation/ImageGet).
     *
     * operationId: ImageLoad
     * Request URI: /images/load
     */
    public async ImageLoad(params: Params$ImageLoad, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/images/load`;
        const headers = {
            "Content-Type": "application/x-tar"
        };
        const queryParameters: QueryParameters = {
            quiet: { value: params.parameter.quiet, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Create an exec instance
     * Run a command inside a running container.
     * operationId: ContainerExec
     * Request URI: /containers/{id}/exec
     */
    public async ContainerExec(params: Params$ContainerExec, option?: RequestOption): Promise<Response$ContainerExec$Status$201["application/json"]> {
        const url = this.baseUrl + `/containers/${params.parameter.id}/exec`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Start an exec instance
     * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
     * operationId: ExecStart
     * Request URI: /exec/{id}/start
     */
    public async ExecStart(params: Params$ExecStart, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/exec/${params.parameter.id}/start`;
        const headers = {
            "Content-Type": "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Resize an exec instance
     * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance.
     * operationId: ExecResize
     * Request URI: /exec/{id}/resize
     */
    public async ExecResize(params: Params$ExecResize, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/exec/${params.parameter.id}/resize`;
        const headers = {};
        const queryParameters: QueryParameters = {
            h: { value: params.parameter.h, explode: false },
            w: { value: params.parameter.w, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Inspect an exec instance
     * Return low-level information about an exec instance.
     * operationId: ExecInspect
     * Request URI: /exec/{id}/json
     */
    public async ExecInspect(params: Params$ExecInspect, option?: RequestOption): Promise<Response$ExecInspect$Status$200["application/json"]> {
        const url = this.baseUrl + `/exec/${params.parameter.id}/json`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * List volumes
     * operationId: VolumeList
     * Request URI: /volumes
     */
    public async VolumeList(params: Params$VolumeList, option?: RequestOption): Promise<Response$VolumeList$Status$200["application/json"]> {
        const url = this.baseUrl + `/volumes`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Create a volume
     * operationId: VolumeCreate
     * Request URI: /volumes/create
     */
    public async VolumeCreate(params: Params$VolumeCreate, option?: RequestOption): Promise<Response$VolumeCreate$Status$201["application/json"]> {
        const url = this.baseUrl + `/volumes/create`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Inspect a volume
     * operationId: VolumeInspect
     * Request URI: /volumes/{name}
     */
    public async VolumeInspect(params: Params$VolumeInspect, option?: RequestOption): Promise<Response$VolumeInspect$Status$200["application/json"]> {
        const url = this.baseUrl + `/volumes/${params.parameter.name}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Remove a volume
     * Instruct the driver to remove the volume.
     * operationId: VolumeDelete
     * Request URI: /volumes/{name}
     */
    public async VolumeDelete(params: Params$VolumeDelete, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/volumes/${params.parameter.name}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            force: { value: params.parameter.force, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * Delete unused volumes
     * operationId: VolumePrune
     * Request URI: /volumes/prune
     */
    public async VolumePrune(params: Params$VolumePrune, option?: RequestOption): Promise<Response$VolumePrune$Status$200["application/json"]> {
        const url = this.baseUrl + `/volumes/prune`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * List networks
     * Returns a list of networks. For details on the format, see [the network inspect endpoint](#operation/NetworkInspect).
     *
     * Note that it uses a different, smaller representation of a network than inspecting a single network. For example,
     * the list of containers attached to the network is not propagated in API versions 1.28 and up.
     *
     * operationId: NetworkList
     * Request URI: /networks
     */
    public async NetworkList(params: Params$NetworkList, option?: RequestOption): Promise<Response$NetworkList$Status$200["application/json"]> {
        const url = this.baseUrl + `/networks`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Inspect a network
     * operationId: NetworkInspect
     * Request URI: /networks/{id}
     */
    public async NetworkInspect(params: Params$NetworkInspect, option?: RequestOption): Promise<Response$NetworkInspect$Status$200["application/json"]> {
        const url = this.baseUrl + `/networks/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            verbose: { value: params.parameter.verbose, explode: false },
            scope: { value: params.parameter.scope, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Remove a network
     * operationId: NetworkDelete
     * Request URI: /networks/{id}
     */
    public async NetworkDelete(params: Params$NetworkDelete, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/networks/${params.parameter.id}`;
        const headers = {};
        return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
    }
    /**
     * Create a network
     * operationId: NetworkCreate
     * Request URI: /networks/create
     */
    public async NetworkCreate(params: Params$NetworkCreate, option?: RequestOption): Promise<Response$NetworkCreate$Status$201["application/json"]> {
        const url = this.baseUrl + `/networks/create`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Connect a container to a network
     * operationId: NetworkConnect
     * Request URI: /networks/{id}/connect
     */
    public async NetworkConnect(params: Params$NetworkConnect, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/networks/${params.parameter.id}/connect`;
        const headers = {
            "Content-Type": "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Disconnect a container from a network
     * operationId: NetworkDisconnect
     * Request URI: /networks/{id}/disconnect
     */
    public async NetworkDisconnect(params: Params$NetworkDisconnect, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/networks/${params.parameter.id}/disconnect`;
        const headers = {
            "Content-Type": "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Delete unused networks
     * operationId: NetworkPrune
     * Request URI: /networks/prune
     */
    public async NetworkPrune(params: Params$NetworkPrune, option?: RequestOption): Promise<Response$NetworkPrune$Status$200["application/json"]> {
        const url = this.baseUrl + `/networks/prune`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * List plugins
     * Returns information about installed plugins.
     * operationId: PluginList
     * Request URI: /plugins
     */
    public async PluginList(params: Params$PluginList, option?: RequestOption): Promise<Response$PluginList$Status$200["application/json"]> {
        const url = this.baseUrl + `/plugins`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Get plugin privileges
     * operationId: GetPluginPrivileges
     * Request URI: /plugins/privileges
     */
    public async GetPluginPrivileges<ResponseContentType extends ResponseContentType$GetPluginPrivileges>(params: Params$GetPluginPrivileges<ResponseContentType>, option?: RequestOption): Promise<Response$GetPluginPrivileges$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/plugins/privileges`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            remote: { value: params.parameter.remote, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Install a plugin
     * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).
     *
     * operationId: PluginPull
     * Request URI: /plugins/pull
     */
    public async PluginPull<RequestContentType extends RequestContentType$PluginPull>(params: Params$PluginPull<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/plugins/pull`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            "X-Registry-Auth": params.parameter["X-Registry-Auth"]
        };
        const queryParameters: QueryParameters = {
            remote: { value: params.parameter.remote, explode: false },
            name: { value: params.parameter.name, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Inspect a plugin
     * operationId: PluginInspect
     * Request URI: /plugins/{name}/json
     */
    public async PluginInspect<ResponseContentType extends ResponseContentType$PluginInspect>(params: Params$PluginInspect<ResponseContentType>, option?: RequestOption): Promise<Response$PluginInspect$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/plugins/${params.parameter.name}/json`;
        const headers = {
            Accept: params.headers.Accept
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Remove a plugin
     * operationId: PluginDelete
     * Request URI: /plugins/{name}
     */
    public async PluginDelete<ResponseContentType extends ResponseContentType$PluginDelete>(params: Params$PluginDelete<ResponseContentType>, option?: RequestOption): Promise<Response$PluginDelete$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/plugins/${params.parameter.name}`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            force: { value: params.parameter.force, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * Enable a plugin
     * operationId: PluginEnable
     * Request URI: /plugins/{name}/enable
     */
    public async PluginEnable(params: Params$PluginEnable, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/plugins/${params.parameter.name}/enable`;
        const headers = {};
        const queryParameters: QueryParameters = {
            timeout: { value: params.parameter.timeout, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Disable a plugin
     * operationId: PluginDisable
     * Request URI: /plugins/{name}/disable
     */
    public async PluginDisable(params: Params$PluginDisable, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/plugins/${params.parameter.name}/disable`;
        const headers = {};
        return this.apiClient.request("POST", url, headers, undefined, undefined, option);
    }
    /**
     * Upgrade a plugin
     * operationId: PluginUpgrade
     * Request URI: /plugins/{name}/upgrade
     */
    public async PluginUpgrade<RequestContentType extends RequestContentType$PluginUpgrade>(params: Params$PluginUpgrade<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/plugins/${params.parameter.name}/upgrade`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            "X-Registry-Auth": params.parameter["X-Registry-Auth"]
        };
        const queryParameters: QueryParameters = {
            remote: { value: params.parameter.remote, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Create a plugin
     * operationId: PluginCreate
     * Request URI: /plugins/create
     */
    public async PluginCreate(params: Params$PluginCreate, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/plugins/create`;
        const headers = {
            "Content-Type": "application/x-tar"
        };
        const queryParameters: QueryParameters = {
            name: { value: params.parameter.name, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Push a plugin
     * Push a plugin to the registry.
     *
     * operationId: PluginPush
     * Request URI: /plugins/{name}/push
     */
    public async PluginPush(params: Params$PluginPush, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/plugins/${params.parameter.name}/push`;
        const headers = {};
        return this.apiClient.request("POST", url, headers, undefined, undefined, option);
    }
    /**
     * Configure a plugin
     * operationId: PluginSet
     * Request URI: /plugins/{name}/set
     */
    public async PluginSet(params: Params$PluginSet, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/plugins/${params.parameter.name}/set`;
        const headers = {
            "Content-Type": "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * List nodes
     * operationId: NodeList
     * Request URI: /nodes
     */
    public async NodeList<ResponseContentType extends ResponseContentType$NodeList>(params: Params$NodeList<ResponseContentType>, option?: RequestOption): Promise<Response$NodeList$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/nodes`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Inspect a node
     * operationId: NodeInspect
     * Request URI: /nodes/{id}
     */
    public async NodeInspect<ResponseContentType extends ResponseContentType$NodeInspect>(params: Params$NodeInspect<ResponseContentType>, option?: RequestOption): Promise<Response$NodeInspect$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/nodes/${params.parameter.id}`;
        const headers = {
            Accept: params.headers.Accept
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Delete a node
     * operationId: NodeDelete
     * Request URI: /nodes/{id}
     */
    public async NodeDelete(params: Params$NodeDelete, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/nodes/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            force: { value: params.parameter.force, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * Update a node
     * operationId: NodeUpdate
     * Request URI: /nodes/{id}/update
     */
    public async NodeUpdate<RequestContentType extends RequestContentType$NodeUpdate>(params: Params$NodeUpdate<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/nodes/${params.parameter.id}/update`;
        const headers = {
            "Content-Type": params.headers["Content-Type"]
        };
        const queryParameters: QueryParameters = {
            version: { value: params.parameter.version, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Inspect swarm
     * operationId: SwarmInspect
     * Request URI: /swarm
     */
    public async SwarmInspect<ResponseContentType extends ResponseContentType$SwarmInspect>(params: Params$SwarmInspect<ResponseContentType>, option?: RequestOption): Promise<Response$SwarmInspect$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/swarm`;
        const headers = {
            Accept: params.headers.Accept
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Initialize a new swarm
     * operationId: SwarmInit
     * Request URI: /swarm/init
     */
    public async SwarmInit<RequestContentType extends RequestContentType$SwarmInit, ResponseContentType extends ResponseContentType$SwarmInit>(params: Params$SwarmInit<RequestContentType, ResponseContentType>, option?: RequestOption): Promise<Response$SwarmInit$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/swarm/init`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: params.headers.Accept
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Join an existing swarm
     * operationId: SwarmJoin
     * Request URI: /swarm/join
     */
    public async SwarmJoin<RequestContentType extends RequestContentType$SwarmJoin>(params: Params$SwarmJoin<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/swarm/join`;
        const headers = {
            "Content-Type": params.headers["Content-Type"]
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Leave a swarm
     * operationId: SwarmLeave
     * Request URI: /swarm/leave
     */
    public async SwarmLeave(params: Params$SwarmLeave, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/swarm/leave`;
        const headers = {};
        const queryParameters: QueryParameters = {
            force: { value: params.parameter.force, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /**
     * Update a swarm
     * operationId: SwarmUpdate
     * Request URI: /swarm/update
     */
    public async SwarmUpdate<RequestContentType extends RequestContentType$SwarmUpdate>(params: Params$SwarmUpdate<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/swarm/update`;
        const headers = {
            "Content-Type": params.headers["Content-Type"]
        };
        const queryParameters: QueryParameters = {
            version: { value: params.parameter.version, explode: false },
            rotateWorkerToken: { value: params.parameter.rotateWorkerToken, explode: false },
            rotateManagerToken: { value: params.parameter.rotateManagerToken, explode: false },
            rotateManagerUnlockKey: { value: params.parameter.rotateManagerUnlockKey, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Get the unlock key
     * operationId: SwarmUnlockkey
     * Request URI: /swarm/unlockkey
     */
    public async SwarmUnlockkey<ResponseContentType extends ResponseContentType$SwarmUnlockkey>(params: Params$SwarmUnlockkey<ResponseContentType>, option?: RequestOption): Promise<Response$SwarmUnlockkey$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/swarm/unlockkey`;
        const headers = {
            Accept: params.headers.Accept
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Unlock a locked manager
     * operationId: SwarmUnlock
     * Request URI: /swarm/unlock
     */
    public async SwarmUnlock(params: Params$SwarmUnlock, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/swarm/unlock`;
        const headers = {
            "Content-Type": "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * List services
     * operationId: ServiceList
     * Request URI: /services
     */
    public async ServiceList<ResponseContentType extends ResponseContentType$ServiceList>(params: Params$ServiceList<ResponseContentType>, option?: RequestOption): Promise<Response$ServiceList$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/services`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Create a service
     * operationId: ServiceCreate
     * Request URI: /services/create
     */
    public async ServiceCreate(params: Params$ServiceCreate, option?: RequestOption): Promise<Response$ServiceCreate$Status$201["application/json"]> {
        const url = this.baseUrl + `/services/create`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json",
            "X-Registry-Auth": params.parameter["X-Registry-Auth"]
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Inspect a service
     * operationId: ServiceInspect
     * Request URI: /services/{id}
     */
    public async ServiceInspect<ResponseContentType extends ResponseContentType$ServiceInspect>(params: Params$ServiceInspect<ResponseContentType>, option?: RequestOption): Promise<Response$ServiceInspect$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/services/${params.parameter.id}`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            insertDefaults: { value: params.parameter.insertDefaults, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Delete a service
     * operationId: ServiceDelete
     * Request URI: /services/{id}
     */
    public async ServiceDelete(params: Params$ServiceDelete, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/services/${params.parameter.id}`;
        const headers = {};
        return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
    }
    /**
     * Update a service
     * operationId: ServiceUpdate
     * Request URI: /services/{id}/update
     */
    public async ServiceUpdate(params: Params$ServiceUpdate, option?: RequestOption): Promise<Response$ServiceUpdate$Status$200["application/json"]> {
        const url = this.baseUrl + `/services/${params.parameter.id}/update`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json",
            "X-Registry-Auth": params.parameter["X-Registry-Auth"]
        };
        const queryParameters: QueryParameters = {
            version: { value: params.parameter.version, explode: false },
            registryAuthFrom: { value: params.parameter.registryAuthFrom, explode: false },
            rollback: { value: params.parameter.rollback, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Get service logs
     * Get `stdout` and `stderr` logs from a service.
     *
     * **Note**: This endpoint works only for services with the `json-file` or `journald` logging drivers.
     *
     * operationId: ServiceLogs
     * Request URI: /services/{id}/logs
     */
    public async ServiceLogs<ResponseContentType extends ResponseContentType$ServiceLogs>(params: Params$ServiceLogs<ResponseContentType>, option?: RequestOption): Promise<Response$ServiceLogs$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/services/${params.parameter.id}/logs`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            details: { value: params.parameter.details, explode: false },
            follow: { value: params.parameter.follow, explode: false },
            stdout: { value: params.parameter.stdout, explode: false },
            stderr: { value: params.parameter.stderr, explode: false },
            since: { value: params.parameter.since, explode: false },
            timestamps: { value: params.parameter.timestamps, explode: false },
            tail: { value: params.parameter.tail, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * List tasks
     * operationId: TaskList
     * Request URI: /tasks
     */
    public async TaskList(params: Params$TaskList, option?: RequestOption): Promise<Response$TaskList$Status$200["application/json"]> {
        const url = this.baseUrl + `/tasks`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Inspect a task
     * operationId: TaskInspect
     * Request URI: /tasks/{id}
     */
    public async TaskInspect(params: Params$TaskInspect, option?: RequestOption): Promise<Response$TaskInspect$Status$200["application/json"]> {
        const url = this.baseUrl + `/tasks/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Get task logs
     * Get `stdout` and `stderr` logs from a task.
     *
     * **Note**: This endpoint works only for services with the `json-file` or `journald` logging drivers.
     *
     * operationId: TaskLogs
     * Request URI: /tasks/{id}/logs
     */
    public async TaskLogs<ResponseContentType extends ResponseContentType$TaskLogs>(params: Params$TaskLogs<ResponseContentType>, option?: RequestOption): Promise<Response$TaskLogs$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/tasks/${params.parameter.id}/logs`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            details: { value: params.parameter.details, explode: false },
            follow: { value: params.parameter.follow, explode: false },
            stdout: { value: params.parameter.stdout, explode: false },
            stderr: { value: params.parameter.stderr, explode: false },
            since: { value: params.parameter.since, explode: false },
            timestamps: { value: params.parameter.timestamps, explode: false },
            tail: { value: params.parameter.tail, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * List secrets
     * operationId: SecretList
     * Request URI: /secrets
     */
    public async SecretList(params: Params$SecretList, option?: RequestOption): Promise<Response$SecretList$Status$200["application/json"]> {
        const url = this.baseUrl + `/secrets`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Create a secret
     * operationId: SecretCreate
     * Request URI: /secrets/create
     */
    public async SecretCreate(params: Params$SecretCreate, option?: RequestOption): Promise<Response$SecretCreate$Status$201["application/json"]> {
        const url = this.baseUrl + `/secrets/create`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Inspect a secret
     * operationId: SecretInspect
     * Request URI: /secrets/{id}
     */
    public async SecretInspect(params: Params$SecretInspect, option?: RequestOption): Promise<Response$SecretInspect$Status$200["application/json"]> {
        const url = this.baseUrl + `/secrets/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Delete a secret
     * operationId: SecretDelete
     * Request URI: /secrets/{id}
     */
    public async SecretDelete(params: Params$SecretDelete, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/secrets/${params.parameter.id}`;
        const headers = {};
        return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
    }
    /**
     * Update a Secret
     * operationId: SecretUpdate
     * Request URI: /secrets/{id}/update
     */
    public async SecretUpdate<RequestContentType extends RequestContentType$SecretUpdate>(params: Params$SecretUpdate<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/secrets/${params.parameter.id}/update`;
        const headers = {
            "Content-Type": params.headers["Content-Type"]
        };
        const queryParameters: QueryParameters = {
            version: { value: params.parameter.version, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * List configs
     * operationId: ConfigList
     * Request URI: /configs
     */
    public async ConfigList(params: Params$ConfigList, option?: RequestOption): Promise<Response$ConfigList$Status$200["application/json"]> {
        const url = this.baseUrl + `/configs`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            filters: { value: params.parameter.filters, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Create a config
     * operationId: ConfigCreate
     * Request URI: /configs/create
     */
    public async ConfigCreate(params: Params$ConfigCreate, option?: RequestOption): Promise<Response$ConfigCreate$Status$201["application/json"]> {
        const url = this.baseUrl + `/configs/create`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Inspect a config
     * operationId: ConfigInspect
     * Request URI: /configs/{id}
     */
    public async ConfigInspect(params: Params$ConfigInspect, option?: RequestOption): Promise<Response$ConfigInspect$Status$200["application/json"]> {
        const url = this.baseUrl + `/configs/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Delete a config
     * operationId: ConfigDelete
     * Request URI: /configs/{id}
     */
    public async ConfigDelete(params: Params$ConfigDelete, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/configs/${params.parameter.id}`;
        const headers = {};
        return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
    }
    /**
     * Update a Config
     * operationId: ConfigUpdate
     * Request URI: /configs/{id}/update
     */
    public async ConfigUpdate<RequestContentType extends RequestContentType$ConfigUpdate>(params: Params$ConfigUpdate<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/configs/${params.parameter.id}/update`;
        const headers = {
            "Content-Type": params.headers["Content-Type"]
        };
        const queryParameters: QueryParameters = {
            version: { value: params.parameter.version, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Get image information from the registry
     * Return image digest and platform information by contacting the registry.
     * operationId: DistributionInspect
     * Request URI: /distribution/{name}/json
     */
    public async DistributionInspect(params: Params$DistributionInspect, option?: RequestOption): Promise<Response$DistributionInspect$Status$200["application/json"]> {
        const url = this.baseUrl + `/distribution/${params.parameter.name}/json`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Initialize interactive session
     * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.
     *
     * > **Note**: This endpoint is *experimental* and only available if the daemon is started with experimental
     * > features enabled. The specifications for this endpoint may still change in a future version of the API.
     *
     * ### Hijacking
     *
     * This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.
     *
     * For example, the client sends this request to upgrade the connection:
     *
     * ```
     * POST /session HTTP/1.1
     * Upgrade: h2c
     * Connection: Upgrade
     * ```
     *
     * The Docker daemon will respond with a `101 UPGRADED` response follow with the raw stream:
     *
     * ```
     * HTTP/1.1 101 UPGRADED
     * Connection: Upgrade
     * Upgrade: h2c
     * ```
     *
     * operationId: Session
     * Request URI: /session
     */
    public async Session(option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/session`;
        const headers = {};
        return this.apiClient.request("POST", url, headers, undefined, undefined, option);
    }
}
